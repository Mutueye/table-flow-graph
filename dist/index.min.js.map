{"version":3,"file":"index.min.js","sources":["../src/lib/dom.ts","../src/lib/utils.ts","../src/components/ui/icon/svgIconList.ts","../src/components/ui/icon/Icon.ts","../src/components/ui/tooltip/Tooltip.ts","../src/components/ui/button/Button.ts","../src/components/ui/toggler/Toggler.ts","../src/components/ui/dialog/Dialog.ts","../src/components/table/EditColumnDialog.ts","../src/components/toolbar/HintManager.ts","../src/components/toolbar/Toolbar.ts","../src/components/ui/popup/Popup.ts","../src/components/table/EditNodeDialog.ts","../src/components/table/TableCell.ts","../src/components/table/TableHeaderCell.ts","../src/components/table/TableMaskBox.ts","../src/components/table/TableMask.ts","../src/components/table/TableController.ts","../src/components/line/LineSegment.ts","../src/components/line/LineGroup.ts","../src/components/line/LineController.ts","../src/components/anchor/Anchor.ts","../src/components/anchor/AnchorController.ts","../src/index.ts"],"sourcesContent":["// HTMLElementTagNameMap from lib.dom.d.ts\ninterface HTMLElementTagNameMap {\n  a: HTMLAnchorElement;\n  abbr: HTMLElement;\n  address: HTMLElement;\n  area: HTMLAreaElement;\n  article: HTMLElement;\n  aside: HTMLElement;\n  audio: HTMLAudioElement;\n  b: HTMLElement;\n  base: HTMLBaseElement;\n  bdi: HTMLElement;\n  bdo: HTMLElement;\n  blockquote: HTMLQuoteElement;\n  body: HTMLBodyElement;\n  br: HTMLBRElement;\n  button: HTMLButtonElement;\n  canvas: HTMLCanvasElement;\n  caption: HTMLTableCaptionElement;\n  cite: HTMLElement;\n  code: HTMLElement;\n  col: HTMLTableColElement;\n  colgroup: HTMLTableColElement;\n  data: HTMLDataElement;\n  datalist: HTMLDataListElement;\n  dd: HTMLElement;\n  del: HTMLModElement;\n  details: HTMLDetailsElement;\n  dfn: HTMLElement;\n  dialog: HTMLDialogElement;\n  dir: HTMLDirectoryElement;\n  div: HTMLDivElement;\n  dl: HTMLDListElement;\n  dt: HTMLElement;\n  em: HTMLElement;\n  embed: HTMLEmbedElement;\n  fieldset: HTMLFieldSetElement;\n  figcaption: HTMLElement;\n  figure: HTMLElement;\n  font: HTMLFontElement;\n  footer: HTMLElement;\n  form: HTMLFormElement;\n  frame: HTMLFrameElement;\n  frameset: HTMLFrameSetElement;\n  h1: HTMLHeadingElement;\n  h2: HTMLHeadingElement;\n  h3: HTMLHeadingElement;\n  h4: HTMLHeadingElement;\n  h5: HTMLHeadingElement;\n  h6: HTMLHeadingElement;\n  head: HTMLHeadElement;\n  header: HTMLElement;\n  hgroup: HTMLElement;\n  hr: HTMLHRElement;\n  html: HTMLHtmlElement;\n  i: HTMLElement;\n  iframe: HTMLIFrameElement;\n  img: HTMLImageElement;\n  input: HTMLInputElement;\n  ins: HTMLModElement;\n  kbd: HTMLElement;\n  label: HTMLLabelElement;\n  legend: HTMLLegendElement;\n  li: HTMLLIElement;\n  link: HTMLLinkElement;\n  main: HTMLElement;\n  map: HTMLMapElement;\n  mark: HTMLElement;\n  marquee: HTMLMarqueeElement;\n  menu: HTMLMenuElement;\n  meta: HTMLMetaElement;\n  meter: HTMLMeterElement;\n  nav: HTMLElement;\n  noscript: HTMLElement;\n  object: HTMLObjectElement;\n  ol: HTMLOListElement;\n  optgroup: HTMLOptGroupElement;\n  option: HTMLOptionElement;\n  output: HTMLOutputElement;\n  p: HTMLParagraphElement;\n  param: HTMLParamElement;\n  picture: HTMLPictureElement;\n  pre: HTMLPreElement;\n  progress: HTMLProgressElement;\n  q: HTMLQuoteElement;\n  rp: HTMLElement;\n  rt: HTMLElement;\n  ruby: HTMLElement;\n  s: HTMLElement;\n  samp: HTMLElement;\n  script: HTMLScriptElement;\n  section: HTMLElement;\n  select: HTMLSelectElement;\n  slot: HTMLSlotElement;\n  small: HTMLElement;\n  source: HTMLSourceElement;\n  span: HTMLSpanElement;\n  strong: HTMLElement;\n  style: HTMLStyleElement;\n  sub: HTMLElement;\n  summary: HTMLElement;\n  sup: HTMLElement;\n  table: HTMLTableElement;\n  tbody: HTMLTableSectionElement;\n  td: HTMLTableCellElement;\n  template: HTMLTemplateElement;\n  textarea: HTMLTextAreaElement;\n  tfoot: HTMLTableSectionElement;\n  th: HTMLTableCellElement;\n  thead: HTMLTableSectionElement;\n  time: HTMLTimeElement;\n  title: HTMLTitleElement;\n  tr: HTMLTableRowElement;\n  track: HTMLTrackElement;\n  u: HTMLElement;\n  ul: HTMLUListElement;\n  var: HTMLElement;\n  video: HTMLVideoElement;\n  wbr: HTMLElement;\n}\n\n/**\n * Create an element with designated tagName，and add a className to it,\n * then append to parentNode if has one.\n * @param tagName\n * @param className\n * @param parentNode\n * @returns\n */\nexport function createClassElement<K extends keyof HTMLElementTagNameMap>(\n  tagName: K,\n  className: string,\n  parentNode: HTMLElement = null,\n): HTMLElementTagNameMap[K] {\n  const el = document.createElement(tagName);\n  el.className = className;\n  if (parentNode) parentNode.appendChild(el);\n  return el;\n}\n\nconst elMatches =\n  typeof Element !== 'undefined' &&\n  (Element.prototype.matches || Element.prototype.webkitMatchesSelector);\n\nexport function matches(element: HTMLElement, query: string): boolean {\n  if (!elMatches) {\n    throw new Error('No element matching method supported');\n  }\n\n  return elMatches.call(element, query);\n}\n\n/**\n * Delete a dom element\n * @param {HTMLElement} element\n */\nexport function removeElement(element: HTMLElement) {\n  if (element) {\n    if (element.remove) {\n      element.remove();\n    } else {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    }\n  }\n}\n\nexport function queryChildren(element: HTMLElement, selector: string): HTMLElement[] {\n  return Array.prototype.filter.call(element.children, (child: HTMLElement) =>\n    matches(child, selector),\n  );\n}\n\nexport function getStyles(element: HTMLElement): CSSStyleDeclaration {\n  return getComputedStyle(element);\n}\n\nexport function setStyles(element: HTMLElement, obj: Partial<CSSStyleDeclaration>) {\n  for (const key in obj) {\n    let val = obj[key];\n    if (typeof val === 'number') {\n      val = `${val}px`;\n    }\n    element.style[key] = val;\n  }\n  return element;\n}\n\nexport const createElementFromHtmlString = (htmlString: string) => {\n  const div = document.createElement('div');\n  div.innerHTML = htmlString.trim();\n\n  // Change this to div.childNodes to support multiple top-level nodes.\n  return div.firstChild as HTMLElement;\n};\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport function debounce<F extends Function>(func: F, wait: number): F {\n  let timeoutID: number;\n\n  if (!Number.isInteger(wait)) {\n    console.warn('Call debounce without a valid number');\n    wait = 300;\n  }\n\n  // conversion through any necessary as it wont satisfy criteria otherwise\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return <any>function (this: any, ...args: any[]) {\n    clearTimeout(timeoutID);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    timeoutID = window.setTimeout(function () {\n      func.apply(context, args);\n    }, wait);\n  };\n}\n\n// check if last column/row deleteable by occupiedList\nexport const setColumnAndRowDeletable = (\n  occupiedList: number[][],\n  totalRows: number,\n  totalColumns: number,\n) => {\n  let canDeleteColumn = true;\n  let canDeleteRow = true;\n  for (let i = 0; i < totalRows - 1; i++) {\n    if (occupiedList[i][totalColumns - 1] !== 0) {\n      canDeleteColumn = false;\n    }\n  }\n  for (let i = 0; i < totalColumns - 1; i++) {\n    if (occupiedList[totalRows - 1][i] !== 0) {\n      canDeleteRow = false;\n    }\n  }\n  return { canDeleteRow, canDeleteColumn };\n};\n\nexport const uniqId = () => {\n  const eles = window.document.getElementsByTagName('body');\n  const bodyObj = eles.item(0);\n  const c = bodyObj.innerHTML.length;\n  const t = new Date().getTime();\n  const n = Math.floor(Math.random() * 100 + 1);\n  return c.toString() + t.toString() + n.toString();\n};\n","const svgIconList = {\n  edit: '<svg t=\"1657530672054\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"8212\" width=\"200\" height=\"200\"><path d=\"M712.96 268.373333l-128-128c-16.64-16.64-43.52-16.64-60.16 0l-384 384c-8.106667 8.106667-12.373333 18.773333-12.373333 30.293334v128c0 23.466667 19.2 42.666667 42.666666 42.666666h128c11.093333 0 22.186667-4.266667 30.293334-12.373333l264.106666-264.106667 22.186667-22.186666 97.706667-97.706667c16.213333-16.64 16.213333-43.946667-0.426667-60.586667zM281.173333 640H213.333333v-67.84l232.533334-232.533333 67.84 67.84L281.173333 640z m292.693334-292.693333l-67.84-67.84L554.666667 230.826667 622.506667 298.666667l-48.64 48.64zM853.333333 896H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667z\" p-id=\"8213\"></path></svg>',\n  plus: '<svg t=\"1657533725416\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4984\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"4985\"></path><path d=\"M725.333333 512c0 23.466667-19.2 42.666667-42.666666 42.666667h-128v128c0 23.466667-19.2 42.666667-42.666667 42.666666s-42.666667-19.2-42.666667-42.666666v-128H341.333333c-23.466667 0-42.666667-19.2-42.666666-42.666667s19.2-42.666667 42.666666-42.666667h128V341.333333c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666667 42.666666v128h128c23.466667 0 42.666667 19.2 42.666666 42.666667z\" p-id=\"4986\"></path></svg>',\n  x: '<svg t=\"1657533744067\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"5120\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"5121\"></path><path d=\"M663.04 602.453333c16.64 16.64 16.64 43.52 0 60.16-8.533333 8.533333-19.2 12.373333-30.293333 12.373334-11.093333 0-21.76-4.266667-30.293334-12.373334L512 572.16l-90.453333 90.453333c-8.533333 8.533333-19.2 12.373333-30.293334 12.373334-11.093333 0-21.76-4.266667-30.293333-12.373334-16.64-16.64-16.64-43.52 0-60.16l90.453333-90.453333-90.453333-90.453333c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-89.6 90.453333 90.453333 90.453333z\" p-id=\"5122\"></path></svg>',\n  x2: '<svg t=\"1660284061189\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"59188\" width=\"200\" height=\"200\"><path d=\"M755.626667 695.04c16.64 16.64 16.64 43.52 0 60.16-8.533333 8.533333-19.2 12.373333-30.293334 12.373333s-21.76-4.266667-30.293333-12.373333L512 572.16 328.96 755.2c-8.533333 8.533333-19.2 12.373333-30.293333 12.373333s-21.76-4.266667-30.293334-12.373333c-16.64-16.64-16.64-43.52 0-60.16l183.04-183.04-183.04-183.04C251.733333 312.32 251.733333 285.44 268.373333 268.8c16.64-16.64 43.52-16.64 60.16 0l183.04 183.04L694.613333 268.8c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16L572.16 512l183.466667 183.04z\" p-id=\"59189\"></path></svg>',\n  expand:\n    '<svg t=\"1658744557448\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9385\" width=\"200\" height=\"200\"><path d=\"M170.666667 394.24c-23.466667 0-42.666667-19.2-42.666667-42.666667V170.666667c0-23.466667 19.2-42.666667 42.666667-42.666667h180.906666c23.466667 0 42.666667 19.2 42.666667 42.666667s-19.2 42.666667-42.666667 42.666666H213.333333v138.24c0 23.466667-19.2 42.666667-42.666666 42.666667zM672.426667 896c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666H810.666667v-138.24c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667V853.333333c0 23.466667-19.2 42.666667-42.666667 42.666667h-180.906666zM170.666667 896c-11.52 0-22.186667-4.693333-30.293334-12.373333-8.106667-8.106667-12.373333-18.773333-12.373333-30.293334v-180.906666c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667V810.666667h138.24c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667H170.666667zM853.333333 394.24c-23.466667 0-42.666667-19.2-42.666666-42.666667V213.333333h-138.24c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667H853.333333c11.52 0 22.186667 4.693333 30.293334 12.373333 8.106667 8.106667 12.373333 18.773333 12.373333 30.293334v180.906666c0 23.466667-19.2 42.666667-42.666667 42.666667z\" p-id=\"9386\"></path></svg>',\n  move: '<svg t=\"1658744606420\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9520\" width=\"200\" height=\"200\"><path d=\"M426.666667 512c0 23.466667-19.2 42.666667-42.666667 42.666667H230.826667L285.866667 609.706667c16.64 16.64 16.64 43.52 0 60.16-8.106667 8.533333-19.2 12.373333-30.293334 12.373333s-21.76-4.266667-30.293333-12.373333l-128-128c-16.64-16.64-16.64-43.52 0-60.16l128-128c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-54.613333 55.466666H384c23.466667 0 42.666667 19.2 42.666667 42.666667zM926.293333 542.293333l-128 128c-8.106667 8.533333-19.2 12.373333-30.293333 12.373334s-21.76-4.266667-30.293333-12.373334c-16.64-16.64-16.64-43.52 0-60.16l55.04-55.04H640c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667h153.173333L738.133333 414.72c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l128 128c16.64 15.786667 16.64 43.093333 0 59.733333zM670.293333 798.293333l-128 128c-8.106667 8.106667-18.773333 12.373333-30.293333 12.373334s-22.186667-4.693333-30.293333-12.373334l-128-128c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l55.04 55.04V640c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667v153.173333l55.04-55.04c16.64-16.64 43.52-16.64 60.16 0 17.493333 16.213333 17.493333 43.52 0.853333 60.16zM670.293333 286.293333c-16.64 16.64-43.52 16.64-60.16 0l-55.466666-55.466666V384c0 23.466667-19.2 42.666667-42.666667 42.666667s-42.666667-19.2-42.666667-42.666667V230.826667l-55.04 55.466666C405.76 294.4 395.093333 298.666667 384 298.666667s-21.76-4.266667-30.293333-12.373334C337.066667 269.653333 337.066667 242.773333 353.706667 226.133333l128-128c16.64-16.64 43.52-16.64 60.16 0l128 128c17.066667 16.213333 17.066667 43.52 0.426666 60.16z\" p-id=\"9521\"></path></svg>',\n  remove:\n    '<svg t=\"1658744626586\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9655\" width=\"200\" height=\"200\"><path d=\"M405.333333 768c-23.466667 0-42.666667-19.2-42.666666-42.666667v-256c0-23.466667 19.2-42.666667 42.666666-42.666666s42.666667 19.2 42.666667 42.666666v256c0 23.466667-19.2 42.666667-42.666667 42.666667zM618.666667 768c-23.466667 0-42.666667-19.2-42.666667-42.666667v-256c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666666 42.666666v256c0 23.466667-19.2 42.666667-42.666666 42.666667z\" p-id=\"9656\"></path><path d=\"M896 256h-170.666667V128c0-23.466667-19.2-42.666667-42.666666-42.666667H341.333333c-23.466667 0-42.666667 19.2-42.666666 42.666667v128H128c-23.466667 0-42.666667 19.2-42.666667 42.666667s19.2 42.666667 42.666667 42.666666h42.666667v554.666667c0 23.466667 19.2 42.666667 42.666666 42.666667h597.333334c23.466667 0 42.666667-19.2 42.666666-42.666667V341.333333h42.666667c23.466667 0 42.666667-19.2 42.666667-42.666666s-19.2-42.666667-42.666667-42.666667zM384 170.666667h256v85.333333H384V170.666667z m384 682.666666H256V341.333333h512v512z\" p-id=\"9657\"></path></svg>',\n  delete_row:\n    '<svg t=\"1659516333894\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"12036\" width=\"200\" height=\"200\"><path d=\"M663.04 602.453333c16.64 16.64 16.64 43.52 0 60.16-8.533333 8.106667-19.2 12.373333-30.293333 12.373334-11.093333 0-21.76-4.266667-30.293334-12.373334L512 572.586667l-90.453333 90.453333c-8.106667 8.106667-19.2 12.373333-30.293334 12.373333-11.093333 0-21.76-4.266667-30.293333-12.373333-16.64-16.64-16.64-43.52 0-60.16l90.453333-90.453333-90.453333-90.88c-16.64-16.64-16.64-43.52 0-60.586667 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.586667L572.16 512l90.88 90.453333zM896 170.666667c0 23.466667-19.2 42.666667-42.666667 42.666666H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666667zM853.333333 896H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667z\" p-id=\"12037\"></path></svg>',\n  delete_col:\n    '<svg t=\"1659516365239\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"12171\" width=\"200\" height=\"200\"><path d=\"M421.546667 663.04c-16.64 16.64-43.52 16.64-60.16 0-8.106667-8.533333-12.373333-19.2-12.373334-30.293333 0-11.093333 4.266667-21.76 12.373334-30.293334l90.453333-90.453333-90.88-90.453333c-8.106667-8.106667-12.373333-19.2-12.373333-30.293334 0-11.093333 4.266667-21.76 12.373333-30.293333 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.586666 0 16.64 16.64 16.64 43.52 0 60.16L572.16 512l90.453333 90.453333c16.64 16.64 16.64 43.52 0 60.16-16.64 16.64-43.52 16.64-60.586666 0L512 572.16l-90.453333 90.88zM853.333333 896c-23.466667 0-42.666667-19.2-42.666666-42.666667V170.666667c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667v682.666666c0 23.466667-19.2 42.666667-42.666667 42.666667zM128 853.333333V170.666667c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667v682.666666c0 23.466667-19.2 42.666667-42.666666 42.666667s-42.666667-19.2-42.666667-42.666667z\" p-id=\"12172\"></path></svg>',\n};\n\nexport default svgIconList;\n","import { createElementFromHtmlString, setStyles } from '../../../lib/dom';\nimport svgIconList from './svgIconList';\n\n// const svgIconList = {\n//   edit: '<svg t=\"1657530672054\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"8212\" width=\"200\" height=\"200\"><path d=\"M712.96 268.373333l-128-128c-16.64-16.64-43.52-16.64-60.16 0l-384 384c-8.106667 8.106667-12.373333 18.773333-12.373333 30.293334v128c0 23.466667 19.2 42.666667 42.666666 42.666666h128c11.093333 0 22.186667-4.266667 30.293334-12.373333l264.106666-264.106667 22.186667-22.186666 97.706667-97.706667c16.213333-16.64 16.213333-43.946667-0.426667-60.586667zM281.173333 640H213.333333v-67.84l232.533334-232.533333 67.84 67.84L281.173333 640z m292.693334-292.693333l-67.84-67.84L554.666667 230.826667 622.506667 298.666667l-48.64 48.64zM853.333333 896H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667z\" p-id=\"8213\"></path></svg>',\n//   plus: '<svg t=\"1657533725416\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4984\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"4985\"></path><path d=\"M725.333333 512c0 23.466667-19.2 42.666667-42.666666 42.666667h-128v128c0 23.466667-19.2 42.666667-42.666667 42.666666s-42.666667-19.2-42.666667-42.666666v-128H341.333333c-23.466667 0-42.666667-19.2-42.666666-42.666667s19.2-42.666667 42.666666-42.666667h128V341.333333c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666667 42.666666v128h128c23.466667 0 42.666667 19.2 42.666666 42.666667z\" p-id=\"4986\"></path></svg>',\n//   x: '<svg t=\"1657533744067\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"5120\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"5121\"></path><path d=\"M663.04 602.453333c16.64 16.64 16.64 43.52 0 60.16-8.533333 8.533333-19.2 12.373333-30.293333 12.373334-11.093333 0-21.76-4.266667-30.293334-12.373334L512 572.16l-90.453333 90.453333c-8.533333 8.533333-19.2 12.373333-30.293334 12.373334-11.093333 0-21.76-4.266667-30.293333-12.373334-16.64-16.64-16.64-43.52 0-60.16l90.453333-90.453333-90.453333-90.453333c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-89.6 90.453333 90.453333 90.453333z\" p-id=\"5122\"></path></svg>',\n//   expand:\n//     '<svg t=\"1658744557448\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9385\" width=\"200\" height=\"200\"><path d=\"M170.666667 394.24c-23.466667 0-42.666667-19.2-42.666667-42.666667V170.666667c0-23.466667 19.2-42.666667 42.666667-42.666667h180.906666c23.466667 0 42.666667 19.2 42.666667 42.666667s-19.2 42.666667-42.666667 42.666666H213.333333v138.24c0 23.466667-19.2 42.666667-42.666666 42.666667zM672.426667 896c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666H810.666667v-138.24c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667V853.333333c0 23.466667-19.2 42.666667-42.666667 42.666667h-180.906666zM170.666667 896c-11.52 0-22.186667-4.693333-30.293334-12.373333-8.106667-8.106667-12.373333-18.773333-12.373333-30.293334v-180.906666c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667V810.666667h138.24c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667H170.666667zM853.333333 394.24c-23.466667 0-42.666667-19.2-42.666666-42.666667V213.333333h-138.24c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667H853.333333c11.52 0 22.186667 4.693333 30.293334 12.373333 8.106667 8.106667 12.373333 18.773333 12.373333 30.293334v180.906666c0 23.466667-19.2 42.666667-42.666667 42.666667z\" p-id=\"9386\"></path></svg>',\n//   move: '<svg t=\"1658744606420\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9520\" width=\"200\" height=\"200\"><path d=\"M426.666667 512c0 23.466667-19.2 42.666667-42.666667 42.666667H230.826667L285.866667 609.706667c16.64 16.64 16.64 43.52 0 60.16-8.106667 8.533333-19.2 12.373333-30.293334 12.373333s-21.76-4.266667-30.293333-12.373333l-128-128c-16.64-16.64-16.64-43.52 0-60.16l128-128c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-54.613333 55.466666H384c23.466667 0 42.666667 19.2 42.666667 42.666667zM926.293333 542.293333l-128 128c-8.106667 8.533333-19.2 12.373333-30.293333 12.373334s-21.76-4.266667-30.293333-12.373334c-16.64-16.64-16.64-43.52 0-60.16l55.04-55.04H640c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667h153.173333L738.133333 414.72c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l128 128c16.64 15.786667 16.64 43.093333 0 59.733333zM670.293333 798.293333l-128 128c-8.106667 8.106667-18.773333 12.373333-30.293333 12.373334s-22.186667-4.693333-30.293333-12.373334l-128-128c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l55.04 55.04V640c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667v153.173333l55.04-55.04c16.64-16.64 43.52-16.64 60.16 0 17.493333 16.213333 17.493333 43.52 0.853333 60.16zM670.293333 286.293333c-16.64 16.64-43.52 16.64-60.16 0l-55.466666-55.466666V384c0 23.466667-19.2 42.666667-42.666667 42.666667s-42.666667-19.2-42.666667-42.666667V230.826667l-55.04 55.466666C405.76 294.4 395.093333 298.666667 384 298.666667s-21.76-4.266667-30.293333-12.373334C337.066667 269.653333 337.066667 242.773333 353.706667 226.133333l128-128c16.64-16.64 43.52-16.64 60.16 0l128 128c17.066667 16.213333 17.066667 43.52 0.426666 60.16z\" p-id=\"9521\"></path></svg>',\n//   remove:\n//     '<svg t=\"1658744626586\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9655\" width=\"200\" height=\"200\"><path d=\"M405.333333 768c-23.466667 0-42.666667-19.2-42.666666-42.666667v-256c0-23.466667 19.2-42.666667 42.666666-42.666666s42.666667 19.2 42.666667 42.666666v256c0 23.466667-19.2 42.666667-42.666667 42.666667zM618.666667 768c-23.466667 0-42.666667-19.2-42.666667-42.666667v-256c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666666 42.666666v256c0 23.466667-19.2 42.666667-42.666666 42.666667z\" p-id=\"9656\"></path><path d=\"M896 256h-170.666667V128c0-23.466667-19.2-42.666667-42.666666-42.666667H341.333333c-23.466667 0-42.666667 19.2-42.666666 42.666667v128H128c-23.466667 0-42.666667 19.2-42.666667 42.666667s19.2 42.666667 42.666667 42.666666h42.666667v554.666667c0 23.466667 19.2 42.666667 42.666666 42.666667h597.333334c23.466667 0 42.666667-19.2 42.666666-42.666667V341.333333h42.666667c23.466667 0 42.666667-19.2 42.666667-42.666666s-19.2-42.666667-42.666667-42.666667zM384 170.666667h256v85.333333H384V170.666667z m384 682.666666H256V341.333333h512v512z\" p-id=\"9657\"></path></svg>',\n// };\n\nexport class Icon {\n  public element: HTMLElement;\n  constructor(\n    parentElement: HTMLElement | null,\n    options: {\n      name: string;\n      size?: number;\n      color?: string;\n      className?: string;\n      style?: Partial<CSSStyleDeclaration>;\n    },\n  ) {\n    const targetIcon = svgIconList[options.name];\n    if (targetIcon) {\n      this.element = createElementFromHtmlString(svgIconList[options.name]);\n      const size = options.size ? options.size : 16;\n      const color = options.color ? options.color : '#333333';\n      const styleObj: Partial<CSSStyleDeclaration> = {\n        width: size + 'px',\n        height: size + 'px',\n      };\n      if (options.color) {\n        styleObj.fill = color;\n        styleObj.color = color;\n      }\n      setStyles(this.element, styleObj);\n      if (options.style) {\n        setStyles(this.element, options.style);\n      }\n      if (options.className) this.element.setAttribute('class', options.className);\n      this.element.classList.add('tfgraph-icon');\n      parentElement.appendChild(this.element);\n    }\n  }\n}\n","import { createClassElement, removeElement, setStyles } from '../../../lib/dom';\nimport { TooltipOptoins } from '../../../index';\n\n/**\n * table-flow-graph popup\n */\nexport default class Tooltip {\n  targetElement: HTMLElement;\n  options: TooltipOptoins;\n  public element: HTMLElement;\n  public areaElement: HTMLElement;\n  public boxElement: HTMLElement;\n  public arrowElement: HTMLElement;\n  public disabled: boolean;\n  public rendered: boolean;\n  public dismissTimeoutId: number | null;\n  public showTimeoutId: number | null;\n\n  constructor(targetElement: HTMLElement, options: TooltipOptoins) {\n    this.targetElement = targetElement;\n    this.options = options;\n    this.rendered = false;\n    this.targetElement.addEventListener('mouseenter', () => this.mouseEnter());\n    this.targetElement.addEventListener('mouseleave', () => this.mouseLeave());\n  }\n\n  public render() {\n    const { placement = 'top', label } = this.options;\n\n    const targetRect = this.targetElement.getBoundingClientRect();\n    this.element = createClassElement('div', 'tfgraph-tooltip tfgraph-wrapper', document.body);\n    setStyles(this.element, {\n      left: targetRect.left + 0.5 * targetRect.width + 'px',\n      top: targetRect.top + 0.5 * targetRect.height + 'px',\n    });\n\n    this.areaElement = createClassElement('div', `tfgraph-tooltip-area ${placement}`, this.element);\n    this.boxElement = createClassElement('div', 'tfgraph-tooltip-box', this.areaElement);\n    this.arrowElement = createClassElement('div', 'tfgraph-tooltip-arrow', this.areaElement);\n    if (label) this.boxElement.innerHTML = label;\n\n    const areaRect = this.areaElement.getBoundingClientRect();\n    const arrowRect = this.arrowElement.getBoundingClientRect();\n    const areaStyleObj: Partial<CSSStyleDeclaration> = {};\n    const arrowStyleObj: Partial<CSSStyleDeclaration> = {};\n    switch (placement) {\n      case 'top':\n        areaStyleObj.left = -0.5 * areaRect.width + 'px';\n        areaStyleObj.bottom = 0.5 * targetRect.height + 10 + 'px';\n        arrowStyleObj.left = 0.5 * (areaRect.width - arrowRect.width) + 'px';\n        break;\n      case 'right':\n        areaStyleObj.left = 0.5 * targetRect.width + 'px';\n        areaStyleObj.top = -0.5 * areaRect.height + 'px';\n        arrowStyleObj.top = 0.5 * (areaRect.height - arrowRect.height) + 'px';\n        break;\n      case 'bottom':\n        areaStyleObj.left = -0.5 * areaRect.width + 'px';\n        areaStyleObj.top = 0.5 * targetRect.height + 'px';\n        arrowStyleObj.left = 0.5 * (areaRect.width - arrowRect.width) + 'px';\n        break;\n      case 'left':\n        areaStyleObj.right = 0.5 * targetRect.width + 'px';\n        areaStyleObj.top = -0.5 * areaRect.height + 'px';\n        arrowStyleObj.top = 0.5 * (areaRect.height - arrowRect.height) + 'px';\n        break;\n      default:\n        break;\n    }\n    setStyles(this.areaElement, areaStyleObj);\n    setStyles(this.arrowElement, arrowStyleObj);\n\n    document.addEventListener('scroll', () => this.updatePosition());\n    this.rendered = true;\n    if (this.showTimeoutId) {\n      window.clearTimeout(this.showTimeoutId);\n      this.showTimeoutId = null;\n    }\n  }\n\n  public updatePosition() {\n    const targetRect = this.targetElement.getBoundingClientRect();\n    setStyles(this.element, {\n      left: targetRect.left + 0.5 * targetRect.width + 'px',\n      top: targetRect.top + 0.5 * targetRect.height + 'px',\n    });\n  }\n\n  public dismiss() {\n    this.rendered = false;\n    this.targetElement.removeEventListener('mouseenter', () => this.mouseEnter());\n    this.targetElement.removeEventListener('mouseleave', () => this.mouseLeave());\n    document.removeEventListener('scroll', () => this.updatePosition());\n    if (this.element) removeElement(this.element);\n  }\n\n  public mouseEnter() {\n    if (!this.rendered && !this.showTimeoutId) {\n      this.showTimeoutId = window.setTimeout(() => {\n        this.render();\n      }, 500);\n    }\n    if (this.dismissTimeoutId) {\n      window.clearTimeout(this.dismissTimeoutId);\n    }\n  }\n\n  public mouseLeave() {\n    if (this.showTimeoutId) {\n      window.clearTimeout(this.showTimeoutId);\n      this.showTimeoutId = null;\n    }\n    this.dismissTimeoutId = window.setTimeout(() => {\n      this.dismiss();\n    }, 50);\n  }\n}\n","import { createClassElement } from '../../../lib/dom';\nimport { BtnOptions } from '../../../index';\nimport { Icon } from '../icon/Icon';\nimport Tooltip from '../tooltip/Tooltip';\n\n/**\n * table-flow-graph button\n */\nexport default class Button {\n  public element: HTMLElement;\n  public disabled: boolean;\n  public btnToolTip: Tooltip;\n\n  constructor(parentElement: HTMLElement, options: BtnOptions) {\n    const { label, type, onClick, icon, tooltip } = options;\n    let className = 'tfgraph-button is-hoverable';\n    if (options.className) className += ' ' + options.className;\n    className += ' ' + (type ? type : 'default');\n    this.element = createClassElement('button', className, parentElement);\n    if (icon) new Icon(this.element, { name: icon, size: 16, className: label ? 'mr-5' : '' });\n    if (label) {\n      createClassElement('span', '', this.element).innerHTML = label;\n    }\n    if (tooltip) this.btnToolTip = new Tooltip(this.element, { label: tooltip });\n\n    this.element.addEventListener('click', (e) => {\n      if (this.btnToolTip) this.btnToolTip.dismiss();\n      if (this.disabled) return;\n      if (typeof onClick === 'function') {\n        onClick(e);\n      }\n    });\n  }\n\n  setDisabled() {\n    this.disabled = true;\n    this.element.classList.add('disabled');\n  }\n\n  setEnabled() {\n    this.disabled = false;\n    this.element.classList.remove('disabled');\n  }\n}\n","import { createClassElement, setStyles } from '../../../lib/dom';\nimport { TogglerOptions, TogglerButton } from '../../../index';\n\n/**\n * table-flow-graph toggler btn group\n */\nexport default class Toggler {\n  public element: HTMLElement;\n  public indicatorEl: HTMLElement;\n  public btnContainerEl: HTMLElement;\n  public disabled: boolean;\n  public activeIndex: number;\n  public btnList: TogglerButton[] = [];\n\n  constructor(parentElement: HTMLElement, options: TogglerOptions) {\n    const { items, initialActiveIndex, onChange } = options;\n    this.element = createClassElement('div', 'tfgraph-toggler', parentElement);\n    this.indicatorEl = createClassElement('div', 'tfgraph-toggler-indicator', this.element);\n    this.btnContainerEl = createClassElement('div', 'flex flex-row items-center', this.element);\n    items.forEach((item, index) => {\n      const el = createClassElement('button', 'tfgraph-toggler-btn', this.btnContainerEl);\n      el.innerHTML = item.label;\n      this.btnList.push({ itemData: item, el, index });\n      el.addEventListener('click', () => {\n        this.setActive(index);\n        if (typeof onChange === 'function') onChange(item, index);\n      });\n    });\n    this.setActive(typeof initialActiveIndex === 'number' ? initialActiveIndex : 0);\n  }\n\n  setActive(index: number) {\n    if (this.activeIndex !== index) {\n      if (typeof this.activeIndex === 'number') {\n        this.btnList[this.activeIndex].el.classList.remove('active');\n      }\n      this.activeIndex = index;\n      this.btnList[index].el.classList.add('active');\n      this.setActiveIndicator();\n    }\n  }\n\n  setActiveIndicator() {\n    const containerRect = this.btnContainerEl.getBoundingClientRect();\n    const rect = this.btnList[this.activeIndex].el.getBoundingClientRect();\n    setStyles(this.indicatorEl, {\n      width: rect.width + 'px',\n      // this.activeIndex === 0 || this.activeIndex === this.btnList.length - 1\n      //   ? rect.width - 2 + 'px'\n      //   : rect.width + 4 + 'px',\n      left: rect.left - containerRect.left + 4 + 'px',\n      // this.activeIndex === 0\n      //   ? rect.left - containerRect.left + 4 + 'px'\n      //   : rect.left - containerRect.left - 2 + 'px',\n    });\n    // this.indicatorEl.style.width = rect.width + 2 + 'px';\n  }\n\n  setDisabled() {\n    this.disabled = true;\n    this.element.classList.add('disabled');\n  }\n\n  setEnabled() {\n    this.disabled = false;\n    this.element.classList.remove('disabled');\n  }\n}\n","import { createClassElement, removeElement } from '../../../lib/dom';\nimport { DialogOptions } from '../../../index';\nimport { Icon } from '../icon/Icon';\n\n/**\n * table-flow-graph dialog\n */\nexport default class Dialog {\n  targetElement: HTMLElement;\n  public element: HTMLElement;\n  public maskElement: HTMLElement;\n  public boxElement: HTMLElement;\n  public titleBarElement: HTMLElement;\n  public closeBtnElement: HTMLElement;\n  public title: string;\n\n  constructor(options: DialogOptions) {\n    this.title = options.title;\n    this.targetElement = options.targetElement\n      ? options.targetElement\n      : document.getElementsByTagName('body')[0];\n    this.element = createClassElement('div', 'tfgraph-dialog tfgraph-wrapper', this.targetElement);\n    this.maskElement = createClassElement('div', 'tfgraph-dialog-mask', this.element);\n    this.boxElement = createClassElement('div', 'tfgraph-dialog-box', this.element);\n    this.renderTitleBar();\n    this.boxElement.appendChild(options.contentElement);\n    this.targetElement.classList.add('overflow-hidden');\n    this.maskElement.addEventListener('click', () => this.close());\n  }\n\n  renderTitleBar() {\n    this.titleBarElement = createClassElement('div', 'tfgraph-dialog-bar', this.boxElement);\n    const titleEl = createClassElement('div', 'tfgraph-dialog-bar-title', this.titleBarElement);\n    titleEl.innerText = this.title;\n    this.closeBtnElement = createClassElement(\n      'div',\n      'tfgraph-dialog-bar-btn',\n      this.titleBarElement,\n    );\n    new Icon(this.closeBtnElement, { name: 'x2', size: 18 });\n    this.closeBtnElement.addEventListener('click', () => this.close());\n  }\n\n  public close() {\n    this.closeBtnElement.removeEventListener('click', () => this.close());\n    this.maskElement.removeEventListener('click', () => this.close());\n    removeElement(this.element);\n    this.targetElement.classList.remove('overflow-hidden');\n  }\n}\n","import { TableFlowGraph, TFGraphColumn } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport Button from '../ui/button/Button';\nimport Dialog from '../ui/dialog/Dialog';\nimport TableHeaderCell from './TableHeaderCell';\n\nexport default class EditColumnDialog {\n  public dialog: Dialog | null;\n  public targetHeaderCell: TableHeaderCell;\n  public title: string;\n  public graphInstance: TableFlowGraph;\n  public contentElement: HTMLElement;\n  public inputEl: HTMLInputElement;\n  public btnConfirm: Button;\n  public btnCancel: Button;\n  public isEdit: boolean;\n\n  constructor(graphInstance: TableFlowGraph, targetHeaderCell?: TableHeaderCell) {\n    this.graphInstance = graphInstance;\n    this.dialog = null;\n    this.targetHeaderCell = targetHeaderCell;\n    this.setIsEdit();\n    this.renderContent();\n  }\n\n  setIsEdit() {\n    if (this.targetHeaderCell) {\n      this.title = this.targetHeaderCell.columnData.title;\n      this.isEdit = true;\n    } else {\n      this.title = '';\n      this.isEdit = false;\n    }\n    if (this.inputEl) this.inputEl.value = this.title;\n  }\n\n  renderContent() {\n    this.contentElement = createClassElement('div', 'flex flex-col w-420 px-15 pb-15');\n    this.inputEl = createClassElement('input', 'tfgraph-input', this.contentElement);\n    this.inputEl.setAttribute('placeholder', this.graphInstance.options.labels.enterColumnName);\n    const btnContainer = createClassElement(\n      'div',\n      'flex flex-row items-center justify-end mt-15',\n      this.contentElement,\n    );\n    this.btnCancel = new Button(btnContainer, {\n      label: this.graphInstance.options.labels.cancel,\n      type: 'default',\n      className: 'mr-10',\n      onClick: () => {\n        this.dialog.close();\n      },\n    });\n    this.btnConfirm = new Button(btnContainer, {\n      label: this.graphInstance.options.labels.confirm,\n      type: 'primary',\n      onClick: () => {\n        if (this.inputEl.value) {\n          if (this.title !== this.inputEl.value) {\n            if (this.isEdit) {\n              this.targetHeaderCell.columnData.title = this.inputEl.value;\n              this.dialog.close();\n              this.graphInstance.refresh();\n              if (typeof this.graphInstance.options.onEditColumn === 'function') {\n                this.graphInstance.options.onEditColumn(this.targetHeaderCell.columnData);\n              }\n            } else {\n              const colData: TFGraphColumn = {\n                id: `header_col_${this.graphInstance.options.totalColumns}`,\n                title: this.inputEl.value,\n              };\n              this.graphInstance.options.columns.push(colData);\n              this.dialog.close();\n              this.graphInstance.refresh();\n              if (typeof this.graphInstance.options.onAddColumn === 'function') {\n                this.graphInstance.options.onAddColumn(colData);\n              }\n            }\n          } else {\n            this.dialog.close();\n          }\n        }\n      },\n    });\n  }\n\n  public show() {\n    this.setIsEdit();\n    this.dialog = new Dialog({\n      title: this.isEdit\n        ? this.graphInstance.options.labels.editColumn\n        : this.graphInstance.options.labels.addColumn,\n      contentElement: this.contentElement,\n    });\n  }\n}\n","import { TableFlowGraph, HintType } from '../../index';\n\nexport default class HintManager {\n  public targetEl: HTMLElement;\n  public currentHintState: HintType;\n  public graphInstance: TableFlowGraph;\n\n  constructor(targetEl: HTMLElement, graphInstance: TableFlowGraph) {\n    this.targetEl = targetEl;\n    this.graphInstance = graphInstance;\n    this.currentHintState = 'idel';\n    this.targetEl.innerText = '';\n  }\n\n  setHint(hintState: HintType) {\n    this.currentHintState = hintState;\n    switch (this.currentHintState) {\n      case 'idel':\n        this.targetEl.innerText = '';\n        break;\n      case 'drawLine':\n        this.targetEl.innerText = this.graphInstance.options.labels.hint_drawLine;\n        break;\n      case 'hoverLine':\n        this.targetEl.innerText = this.graphInstance.options.labels.hint_hoverLine;\n        break;\n      case 'hoverAnchor':\n        this.targetEl.innerText = this.graphInstance.options.labels.hint_hoverAnchor;\n        break;\n      case 'moveNode':\n        this.targetEl.innerText = this.graphInstance.options.labels.hint_moveNode;\n        break;\n      case 'resizeNode':\n        this.targetEl.innerText = this.graphInstance.options.labels.hint_resizeNode;\n        break;\n      default:\n        this.targetEl.innerText = '';\n        break;\n    }\n  }\n}\n","import { TableFlowGraph, Mode } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport Button from '../ui/button/Button';\nimport Toggler from '../ui/toggler/Toggler';\nimport EditColumnDialog from '../table/EditColumnDialog';\nimport HintManager from './HintManager';\n// import { Icon } from './ui/Icon';\n\n/**\n * table-flow-graph toolbar\n */\nexport default class Toolbar {\n  public element: HTMLElement;\n  public graphInstance: TableFlowGraph;\n  public disabledMask: HTMLElement;\n  public modeToggler: Toggler;\n  public hintEl: HTMLElement;\n  public hintMgr: HintManager;\n  public newColumnBtn: Button;\n  public addColDialog: EditColumnDialog;\n\n  constructor(parentElement: HTMLElement, graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement('div', 'tfgraph-toolbar', parentElement);\n    this.modeToggler = new Toggler(this.element, {\n      items: [\n        { label: this.graphInstance.options.labels.editMode, id: 'edit' },\n        { label: this.graphInstance.options.labels.previewMode, id: 'preview' },\n      ],\n      onChange: (item) => {\n        graphInstance.changeMode(item.id as Mode);\n        this.setToolbarState();\n      },\n    });\n    this.hintEl = createClassElement('div', 'tfgraph-toolbar-hint', this.element);\n    this.hintMgr = new HintManager(this.hintEl, this.graphInstance);\n    // new Icon(this.element, {\n    //   name: 'plus',\n    //   style: { width: '16px', height: '16px' },\n    // });\n    const rightBtns = createClassElement('div', 'flex-row items-center', this.element);\n    this.newColumnBtn = new Button(rightBtns, {\n      icon: 'plus',\n      label: this.graphInstance.options.labels.addColumn,\n      type: 'primary',\n      onClick: () => this.addColumn(),\n    });\n\n    this.disabledMask = createClassElement('div', 'tfgraph-toolbar-mask hidden', this.element);\n    // new Button(rightBtns, { label: '添加行', type: 'primary' });\n\n    // new Button(this.element, { label: 'default' });\n    // new Button(this.element, {\n    //   label: 'clean',\n    //   type: 'clean',\n    //   onClick: () => {\n    //     console.log('clean clicked');\n    //   },\n    // });\n    // new Button(this.element, { label: 'primary', type: 'primary' });\n    // new Button(this.element, { label: 'warning', type: 'warning' });\n    // new Button(this.element, { label: 'danger', type: 'danger' });\n    // new Button(this.element, { label: 'success', type: 'success' });\n    // testBtn.setDisabled();\n    this.setToolbarState();\n    this.addColDialog = new EditColumnDialog(this.graphInstance);\n  }\n\n  addColumn() {\n    if (typeof this.graphInstance.options.addColumn === 'function') {\n      this.graphInstance.options.addColumn();\n    } else {\n      if (this.graphInstance.hasTableHeader) {\n        // add column dialog\n        this.addColDialog.show();\n      } else {\n        this.graphInstance.refresh(\n          Object.assign({}, this.graphInstance.options, {\n            columns: null,\n            totalColumns: this.graphInstance.options.totalColumns + 1,\n          }),\n        );\n        if (typeof this.graphInstance.options.onAddColumn === 'function') {\n          this.graphInstance.options.onAddColumn();\n        }\n      }\n    }\n  }\n\n  disable() {\n    this.disabledMask.classList.remove('hidden');\n  }\n\n  enable() {\n    this.disabledMask.classList.add('hidden');\n  }\n\n  setToolbarState() {\n    if (\n      this.graphInstance.options.totalColumns >= this.graphInstance.options.maxColumns ||\n      this.graphInstance.mode === 'preview'\n    ) {\n      this.newColumnBtn.element.classList.add('hidden');\n    } else {\n      this.newColumnBtn.element.classList.remove('hidden');\n    }\n  }\n}\n","import { createClassElement, removeElement, setStyles } from '../../../lib/dom';\nimport { PopupOptions } from '../../../index';\n\n/**\n * table-flow-graph popup\n */\nexport default class Popup {\n  targetElement: HTMLElement;\n  options: PopupOptions;\n  public element: HTMLElement;\n  public areaElement: HTMLElement;\n  public boxElement: HTMLElement;\n  public arrowElement: HTMLElement;\n  public disabled: boolean;\n  public rendered: boolean;\n  public timeoutId: number | null;\n\n  constructor(targetElement: HTMLElement, options: PopupOptions) {\n    this.targetElement = targetElement;\n    this.options = options;\n    this.rendered = false;\n    this.targetElement.addEventListener('mouseenter', () => this.mouseEnter());\n    this.targetElement.addEventListener('mouseleave', () => this.mouseLeave());\n  }\n\n  public render() {\n    const { placement = 'top', contentElement } = this.options;\n\n    const targetRect = this.targetElement.getBoundingClientRect();\n    this.element = createClassElement('div', 'tfgraph-popup tfgraph-wrapper', document.body);\n    setStyles(this.element, {\n      left: targetRect.left + 0.5 * targetRect.width + 'px',\n      top: targetRect.top + 0.5 * targetRect.height + 'px',\n    });\n\n    this.areaElement = createClassElement('div', `tfgraph-popup-area ${placement}`, this.element);\n    this.boxElement = createClassElement('div', 'tfgraph-popup-box', this.areaElement);\n    this.arrowElement = createClassElement('div', 'tfgraph-popup-arrow', this.areaElement);\n    if (contentElement) this.boxElement.appendChild(contentElement);\n\n    const areaRect = this.areaElement.getBoundingClientRect();\n    const arrowRect = this.arrowElement.getBoundingClientRect();\n    const areaStyleObj: Partial<CSSStyleDeclaration> = {};\n    const arrowStyleObj: Partial<CSSStyleDeclaration> = {};\n    switch (placement) {\n      case 'top':\n        areaStyleObj.left = -0.5 * areaRect.width + 'px';\n        areaStyleObj.bottom = 0.5 * targetRect.height + 10 + 'px';\n        arrowStyleObj.left = 0.5 * (areaRect.width - arrowRect.width) + 'px';\n        break;\n      case 'right':\n        areaStyleObj.left = 0.5 * targetRect.width + 10 + 'px';\n        areaStyleObj.top = -0.5 * areaRect.height + 'px';\n        arrowStyleObj.top = 0.5 * (areaRect.height - arrowRect.height) + 'px';\n        break;\n      case 'bottom':\n        areaStyleObj.left = -0.5 * areaRect.width + 'px';\n        areaStyleObj.top = 0.5 * targetRect.height + 10 + 'px';\n        arrowStyleObj.left = 0.5 * (areaRect.width - arrowRect.width) + 'px';\n        break;\n      case 'left':\n        areaStyleObj.right = 0.5 * targetRect.width + 10 + 'px';\n        areaStyleObj.top = -0.5 * areaRect.height + 'px';\n        arrowStyleObj.top = 0.5 * (areaRect.height - arrowRect.height) + 'px';\n        break;\n      default:\n        break;\n    }\n    setStyles(this.areaElement, areaStyleObj);\n    setStyles(this.arrowElement, arrowStyleObj);\n\n    this.areaElement.addEventListener('mouseenter', () => this.mouseEnter());\n    this.areaElement.addEventListener('mouseleave', () => this.mouseLeave());\n    document.addEventListener('scroll', () => this.updatePosition());\n    this.rendered = true;\n  }\n\n  public updatePosition() {\n    const targetRect = this.targetElement.getBoundingClientRect();\n    setStyles(this.element, {\n      left: targetRect.left + 0.5 * targetRect.width + 'px',\n      top: targetRect.top + 0.5 * targetRect.height + 'px',\n    });\n  }\n\n  public dismiss() {\n    this.rendered = false;\n    this.areaElement.removeEventListener('mouseenter', () => this.mouseEnter());\n    this.areaElement.removeEventListener('mouseleave', () => this.mouseLeave());\n    document.removeEventListener('scroll', () => this.updatePosition());\n    removeElement(this.element);\n  }\n\n  public mouseEnter() {\n    if (!this.rendered) this.render();\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  public mouseLeave() {\n    this.timeoutId = window.setTimeout(() => {\n      this.dismiss();\n    }, 200);\n  }\n}\n","import { TableFlowGraph, TFGraphNode } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport Button from '../ui/button/Button';\nimport Dialog from '../ui/dialog/Dialog';\nimport TableCell from './TableCell';\n\nexport default class EditNodeDialog {\n  public dialog: Dialog | null;\n  public targetCell: TableCell;\n  public title: string;\n  public graphInstance: TableFlowGraph;\n  public contentElement: HTMLElement;\n  public nodeNameInput: HTMLInputElement;\n  public btnConfirm: Button;\n  public btnCancel: Button;\n  public isEdit: boolean;\n\n  constructor(graphInstance: TableFlowGraph, targetCell: TableCell) {\n    this.graphInstance = graphInstance;\n    this.targetCell = targetCell;\n    this.dialog = null;\n    if (targetCell.nodeData) {\n      this.title = targetCell.nodeData.title;\n      this.isEdit = true;\n    } else {\n      this.title = '';\n      this.isEdit = false;\n    }\n    this.renderContent();\n  }\n\n  setIsEdit() {\n    if (this.targetCell.nodeData) {\n      this.title = this.targetCell.nodeData.title;\n      this.isEdit = true;\n    } else {\n      this.title = '';\n      this.isEdit = false;\n    }\n    if (this.nodeNameInput) this.nodeNameInput.value = this.title;\n  }\n\n  renderContent() {\n    this.contentElement = createClassElement('div', 'flex flex-col w-420 px-15 pb-15');\n    this.nodeNameInput = createClassElement('input', 'tfgraph-input', this.contentElement);\n    this.nodeNameInput.setAttribute('placeholder', this.graphInstance.options.labels.enterNodeName);\n    const btnContainer = createClassElement(\n      'div',\n      'flex flex-row items-center justify-end mt-15',\n      this.contentElement,\n    );\n    this.btnCancel = new Button(btnContainer, {\n      label: this.graphInstance.options.labels.cancel,\n      type: 'default',\n      className: 'mr-10',\n      onClick: () => {\n        this.dialog.close();\n      },\n    });\n    this.btnConfirm = new Button(btnContainer, {\n      label: this.graphInstance.options.labels.confirm,\n      type: 'primary',\n      onClick: () => {\n        if (this.nodeNameInput.value) {\n          if (this.title !== this.nodeNameInput.value) {\n            if (this.isEdit) {\n              this.targetCell.nodeData.title = this.nodeNameInput.value;\n              this.dialog.close();\n              this.graphInstance.refresh();\n              if (typeof this.graphInstance.options.onEditNode === 'function') {\n                this.graphInstance.options.onEditNode(this.targetCell.nodeData);\n              }\n            } else {\n              const nodeData: TFGraphNode = {\n                id: `node_${this.targetCell.row}_${this.targetCell.column}`,\n                row: this.targetCell.row,\n                column: this.targetCell.column,\n                rowSpan: 1,\n                colSpan: 1,\n                title: this.nodeNameInput.value,\n              };\n              this.graphInstance.options.nodes.push(nodeData);\n              this.dialog.close();\n              this.graphInstance.refresh();\n              if (typeof this.graphInstance.options.onAddNode === 'function') {\n                this.graphInstance.options.onAddNode(nodeData);\n              }\n            }\n          } else {\n            this.dialog.close();\n          }\n        }\n      },\n    });\n  }\n\n  public show() {\n    this.setIsEdit();\n    this.dialog = new Dialog({\n      title: this.isEdit\n        ? this.graphInstance.options.labels.editNode\n        : this.graphInstance.options.labels.addNode,\n      contentElement: this.contentElement,\n    });\n  }\n}\n","import { TableFlowGraph, TFGraphNode } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport Button from '../ui/button/Button';\nimport Popup from '../ui/popup/Popup';\nimport EditNodeDialog from './EditNodeDialog';\nimport { remove } from 'lodash-es';\n// import Dialog from '../ui/dialog/Dialog';\n\n/**\n * table-flow-graph tabel cell\n */\nexport default class TableCell {\n  public graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public nodeEl: HTMLElement;\n  public controlLayer: HTMLElement;\n  public popup: Popup;\n  public nodeData?: TFGraphNode;\n  public hasNode: boolean;\n  public row: number;\n  public column: number;\n  public rowSpan: number;\n  public colSpan: number;\n  public isTarget: boolean; // is moving or resizing this cell\n  public deleteRowBtn: Button;\n  public deleteColBtn: Button;\n  public editDialog: EditNodeDialog | null;\n\n  constructor(\n    parentElement: HTMLElement,\n    data: TFGraphNode | null,\n    row: number,\n    column: number,\n    graphInstance: TableFlowGraph,\n  ) {\n    this.graphInstance = graphInstance;\n    this.row = row;\n    this.column = column;\n    this.element = this.createTabelCell(data, row, column, this.graphInstance);\n    parentElement.appendChild(this.element);\n  }\n\n  createTabelCell(\n    data: TFGraphNode | null,\n    row,\n    column,\n    graphInstance: TableFlowGraph,\n  ): HTMLElement {\n    const el = createClassElement('div', 'tfgraph-cell');\n    el.setAttribute('id', `${graphInstance.id}_cell_${row}_${column}`);\n    if (data) {\n      const node = createClassElement('div', 'tfgraph-node');\n      node.classList.add(data.type ? data.type : 'default');\n      if (data.isBtn && this.graphInstance.mode !== 'edit') node.classList.add('isBtn');\n      if (typeof this.graphInstance.options.renderNode === 'function') {\n        node.appendChild(this.graphInstance.options.renderNode(data));\n      } else {\n        node.innerText = data.title;\n      }\n\n      // node.innerText = data.id;\n      el.appendChild(node);\n      this.hasNode = true;\n      this.nodeEl = node;\n      this.nodeData = data;\n      this.rowSpan = data.rowSpan;\n      this.colSpan = data.colSpan;\n    } else {\n      this.rowSpan = 1;\n      this.colSpan = 1;\n      this.hasNode = false;\n    }\n    // set min height base on row span\n    el.style.minHeight = 80 * this.rowSpan + 'px';\n    return el;\n  }\n\n  // cell controls for edit mode\n  setEditControls() {\n    this.controlLayer = createClassElement(\n      'div',\n      'tfgraph-cell-control-layer hidden',\n      this.element,\n    );\n    // const controlRowEl = createClassElement(\n    //   'div',\n    //   'flex flex-row items-center justify-center p-15 flex-wrap',\n    //   this.controlLayer,\n    // );\n    this.editDialog = new EditNodeDialog(this.graphInstance, this);\n    if (this.nodeData) {\n      new Button(this.controlLayer, {\n        icon: 'move',\n        type: 'primary',\n        tooltip: this.graphInstance.options.labels.moveNode,\n        className: 'absolute left-6 top-6 p-0 sm w-28 btn-tl',\n        onClick: () => {\n          this.graphInstance.tableController.startMoving(this);\n        },\n      });\n      new Button(this.controlLayer, {\n        icon: 'edit',\n        type: 'primary',\n        tooltip: this.graphInstance.options.labels.editNode,\n        className: 'absolute left-6 bottom-6 p-0 sm w-28 btn-bl',\n        onClick: () => {\n          if (typeof this.graphInstance.options.editNode === 'function') {\n            this.graphInstance.options.editNode(this.nodeData);\n          } else {\n            this.editDialog.show();\n          }\n        },\n      });\n      new Button(this.controlLayer, {\n        icon: 'remove',\n        type: 'danger',\n        tooltip: this.graphInstance.options.labels.deleteNode,\n        className: 'absolute right-6 top-6 p-0 sm w-28 btn-tr',\n        onClick: () => {\n          if (typeof this.graphInstance.options.deleteNode === 'function') {\n            this.graphInstance.options.deleteNode(this.nodeData);\n          } else {\n            // TODO remove cell\n            remove(this.graphInstance.options.nodes, (item) => {\n              return this.nodeData.id === item.id;\n            });\n            this.graphInstance.refresh();\n            if (typeof this.graphInstance.options.onDeleteNode === 'function') {\n              this.graphInstance.options.onDeleteNode(this.nodeData);\n            }\n          }\n        },\n      });\n      new Button(this.controlLayer, {\n        icon: 'expand',\n        type: 'primary',\n        tooltip: this.graphInstance.options.labels.adjustNodeSize,\n        className: 'absolute right-6 bottom-6 p-0 sm w-28 btn-br',\n        onClick: () => {\n          this.graphInstance.tableController.startResizing(this);\n        },\n      });\n    } else {\n      new Button(this.controlLayer, {\n        icon: 'plus',\n        type: 'primary',\n        className: 'absolute left-6 top-6 p-0 sm w-28 btn-tl',\n        tooltip: this.graphInstance.options.labels.addNode,\n        onClick: () => {\n          if (typeof this.graphInstance.options.addNode === 'function') {\n            this.graphInstance.options.addNode(this.row, this.column);\n          } else {\n            this.editDialog.show();\n          }\n        },\n      });\n      if (\n        this.graphInstance.options.totalRows > 1 &&\n        this.row === this.graphInstance.options.totalRows - 1\n      ) {\n        this.deleteRowBtn = new Button(this.controlLayer, {\n          icon: 'delete_row',\n          type: 'danger',\n          className: 'absolute right-6 top-6 p-0 sm w-28 btn-tr',\n          tooltip: this.graphInstance.options.labels.deleteRow,\n          onClick: () => {\n            if (typeof this.graphInstance.options.deleteRow === 'function') {\n              this.graphInstance.options.deleteRow();\n            } else {\n              this.graphInstance.refresh(\n                Object.assign({}, this.graphInstance.options, {\n                  totalRows: this.graphInstance.options.totalRows - 1,\n                }),\n              );\n              if (typeof this.graphInstance.options.onDeleteRow === 'function') {\n                this.graphInstance.options.onDeleteRow();\n              }\n            }\n          },\n        });\n      }\n      if (\n        this.graphInstance.options.totalColumns > 1 &&\n        this.column === this.graphInstance.options.totalColumns - 1\n      ) {\n        this.deleteColBtn = new Button(this.controlLayer, {\n          icon: 'delete_col',\n          type: 'danger',\n          className: 'absolute right-6 bottom-6 p-0 sm w-28 btn-br',\n          tooltip: this.graphInstance.options.labels.deleteColumn,\n          onClick: () => {\n            if (typeof this.graphInstance.options.deleteColumn === 'function') {\n              // custom delete column method\n              const targetColumn =\n                this.graphInstance.options.columns[this.graphInstance.options.totalColumns - 1];\n              this.graphInstance.options.deleteColumn(targetColumn);\n            } else {\n              // auto delete column\n              if (this.graphInstance.hasTableHeader) {\n                // if has options.columns data (table header will be rendered)\n                if (typeof this.graphInstance.options.onDeleteColumn === 'function') {\n                  const targetColumn =\n                    this.graphInstance.options.columns[this.graphInstance.options.totalColumns - 1];\n                  this.graphInstance.options.onDeleteColumn(targetColumn);\n                }\n                this.graphInstance.options.columns.pop();\n                this.graphInstance.refresh(Object.assign({}, this.graphInstance.options));\n              } else {\n                // if options.columns data is null or empty\n                this.graphInstance.refresh(\n                  Object.assign({}, this.graphInstance.options, {\n                    columns: null,\n                    totalColumns: this.graphInstance.options.totalColumns - 1,\n                  }),\n                );\n                if (typeof this.graphInstance.options.onDeleteColumn === 'function') {\n                  this.graphInstance.options.onDeleteColumn();\n                }\n              }\n            }\n          },\n        });\n      }\n    }\n    this.element.addEventListener('mouseenter', () => this.onMouseEnter());\n    this.element.addEventListener('mouseleave', () => this.onMouseLeave());\n  }\n\n  public setViewModeControls() {\n    if (this.nodeData) {\n      this.element.addEventListener('click', () => this.onClickNode());\n      if (this.nodeData.showPopup) {\n        let contentEl: HTMLElement;\n        if (typeof this.graphInstance.options.renderNodeHoverPopup === 'function') {\n          contentEl = this.graphInstance.options.renderNodeHoverPopup(this.nodeData);\n        } else {\n          contentEl = createClassElement('div', 'flex flex-col items-center p-30');\n          contentEl.innerHTML = this.nodeData.title;\n        }\n\n        this.popup = new Popup(this.nodeEl, {\n          placement: 'top',\n          contentElement: contentEl,\n        });\n      }\n    }\n  }\n\n  onMouseEnter() {\n    this.controlLayer.classList.remove('hidden');\n    if (this.deleteRowBtn) {\n      if (\n        this.graphInstance.tableController.canDeleteRow &&\n        this.graphInstance.lineController.canDeleteRow\n      ) {\n        this.deleteRowBtn.element.classList.remove('hidden');\n      } else {\n        this.deleteRowBtn.element.classList.add('hidden');\n      }\n    }\n    if (this.deleteColBtn) {\n      if (\n        this.graphInstance.tableController.canDeleteColumn &&\n        this.graphInstance.lineController.canDeleteColumn\n      ) {\n        this.deleteColBtn.element.classList.remove('hidden');\n      } else {\n        this.deleteColBtn.element.classList.add('hidden');\n      }\n    }\n  }\n\n  onMouseLeave() {\n    this.controlLayer.classList.add('hidden');\n  }\n\n  onClickNode() {\n    if (typeof this.graphInstance.options.onClickNode === 'function') {\n      this.graphInstance.options.onClickNode(this.nodeData, this.nodeEl);\n    }\n  }\n\n  public setIsTarget(isTarget: boolean) {\n    if (isTarget && !this.isTarget) {\n      this.isTarget = true;\n      this.element.style.opacity = '0.4';\n    } else if (!isTarget && this.isTarget) {\n      this.isTarget = false;\n      this.element.style.opacity = '1';\n    }\n  }\n}\n","import { TableFlowGraph, TFGraphColumn } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport Button from '../ui/button/Button';\nimport Popup from '../ui/popup/Popup';\n// import TableHeaderCellMenu from './TableHeaderCellMenu';\nimport EditColumnDialog from './EditColumnDialog';\n\n/**\n * table-flow-graph tabel header cell\n */\nexport default class TableHeaderCell {\n  public graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public columnIndex: number;\n  public isLast: boolean;\n  public columnData: TFGraphColumn;\n  public canDelete: boolean;\n  public canAdd: boolean;\n  public popMenu: Popup | null;\n  // public menu: TableHeaderCellMenu | null;\n  public controlLayer: HTMLElement;\n  public editColDialog: EditColumnDialog;\n\n  constructor(\n    parentElement: HTMLElement,\n    columnData: TFGraphColumn,\n    columnIndex: number,\n    graphInstance: TableFlowGraph,\n  ) {\n    this.graphInstance = graphInstance;\n    this.columnIndex = columnIndex;\n    this.columnData = columnData;\n    this.isLast = this.columnIndex === this.graphInstance.options.totalColumns - 1;\n    this.element = this.createElement(parentElement);\n  }\n\n  createElement(parentElement: HTMLElement): HTMLElement {\n    const el = createClassElement('th', 'tfgraph-th', parentElement);\n    if (this.columnData.title) {\n      el.innerHTML = this.columnData.title;\n    } else {\n      el.classList.add('empty');\n    }\n    if (this.columnData.width) {\n      // TODO load width value from options\n      let width = this.columnData.width;\n      switch (this.columnData.width) {\n        case 'large':\n          width = '200';\n          break;\n        case 'md':\n          width = '170';\n          break;\n        case 'sm':\n          width = '130';\n          break;\n        case 'xs':\n          width = '105';\n          break;\n        default:\n          width = this.columnData.width;\n          break;\n      }\n      el.setAttribute('width', width);\n    } else {\n      el.setAttribute('width', 'auto');\n    }\n    el.setAttribute('id', `${this.graphInstance.id}_col_${this.columnIndex}`);\n    return el;\n  }\n\n  // header cell controls for edit mode\n  public setEditControls() {\n    this.controlLayer = createClassElement(\n      'div',\n      'tfgraph-cell-control-layer hidden',\n      this.element,\n    );\n    this.editColDialog = new EditColumnDialog(this.graphInstance, this);\n    new Button(this.controlLayer, {\n      icon: 'edit',\n      type: 'primary',\n      className: 'absolute left-6 top-6 p-0 sm w-28 btn-tl',\n      tooltip: this.graphInstance.options.labels.editColumn,\n      onClick: () => {\n        if (typeof this.graphInstance.options.editColumn === 'function') {\n          this.graphInstance.options.editColumn(this.columnData);\n        } else {\n          this.editColDialog.show();\n        }\n      },\n    });\n    if (this.isLast && this.graphInstance.tableController.canDeleteColumn) {\n      new Button(this.controlLayer, {\n        icon: 'delete_col',\n        type: 'danger',\n        className: 'absolute right-6 top-6 p-0 sm w-28 btn-tr',\n        tooltip: this.graphInstance.options.labels.deleteColumn,\n        onClick: () => {\n          if (typeof this.graphInstance.options.deleteColumn === 'function') {\n            // custom delete column method\n            this.graphInstance.options.deleteColumn(this.columnData);\n          } else {\n            if (typeof this.graphInstance.options.onDeleteColumn === 'function') {\n              // const targetColumn = this.graphInstance.options.columns[this.graphInstance.options.totalColumns - 1];\n              this.graphInstance.options.onDeleteColumn(this.columnData);\n            }\n            this.graphInstance.options.columns.pop();\n            this.graphInstance.refresh(Object.assign({}, this.graphInstance.options));\n          }\n        },\n      });\n    }\n    this.element.addEventListener('mouseenter', () => this.onMouseEnter());\n    this.element.addEventListener('mouseleave', () => this.onMouseLeave());\n  }\n\n  onMouseEnter() {\n    this.controlLayer.classList.remove('hidden');\n  }\n\n  onMouseLeave() {\n    this.controlLayer.classList.add('hidden');\n  }\n}\n","import { TableFlowGraph, PositionAndSize } from '../../index';\nimport { createClassElement, setStyles } from '../../lib/dom';\nimport TableCell from './TableCell';\n\n/**\n * table-flow-graph anchor controller\n */\nexport default class TableMaskBox {\n  graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public disabled: boolean;\n\n  constructor(parentEl: HTMLElement, targetCell: TableCell, graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.disabled = false;\n    this.element = createClassElement('div', 'tfgraph-table-mask-cell', parentEl);\n    const nodeEl = createClassElement('div', 'tfgraph-table-mask-node', this.element);\n    nodeEl.innerText = targetCell.nodeData.title;\n    // setStyles(this.element, {\n    //   top: top + 'px',\n    //   left: left + 'px',\n    //   width: width + 'px',\n    //   height: height + 'px',\n    // });\n    this.element.addEventListener('click', () => {\n      if (!this.disabled) this.graphInstance.tableController.submitCellChange();\n    });\n  }\n\n  setPositinAndSize(pos_size: PositionAndSize) {\n    setStyles(this.element, {\n      top: pos_size.top + 'px',\n      left: pos_size.left + 'px',\n      width: pos_size.width + 'px',\n      height: pos_size.height + 'px',\n    });\n  }\n\n  disable() {\n    // TODO\n    if (!this.disabled) {\n      this.disabled = true;\n      this.element.classList.add('disabled');\n    }\n  }\n\n  enable() {\n    // TODO\n    if (this.disabled) {\n      this.disabled = false;\n      this.element.classList.remove('disabled');\n    }\n  }\n}\n","import { TableFlowGraph, CellPositionAndSize, TableGridRect } from '../../index';\nimport { createClassElement, removeElement } from '../../lib/dom';\nimport TableCell from './TableCell';\nimport TableMaskBox from './TableMaskBox';\nimport { isEqual, cloneDeep } from 'lodash-es';\n\n/**\n * table-flow-graph anchor controller\n */\nexport default class TableMask {\n  graphInstance: TableFlowGraph;\n  public maskBox: TableMaskBox;\n  public element: HTMLElement;\n  public tableGridRectList: TableGridRect[];\n  public mouseGridRect: TableGridRect;\n  public targetCell: TableCell;\n  public targetCellRect: TableGridRect;\n  public resultCellPositionAndSize: CellPositionAndSize;\n  public filteredOccupiedList: number[][]; // 1: occupied, 0: not occupied\n\n  constructor(tableGridRectList: TableGridRect[], graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement(\n      'div',\n      'tfgraph-cell-mask-layer hidden',\n      graphInstance.element,\n    );\n    this.tableGridRectList = tableGridRectList;\n  }\n\n  private showMask(targetTableCell: TableCell) {\n    this.targetCell = targetTableCell;\n    this.targetCell.setIsTarget(true);\n    this.setFilteredOccupiedList();\n    this.maskBox = new TableMaskBox(this.element, this.targetCell, this.graphInstance);\n    this.mouseGridRect = this.getMouseRect();\n    this.targetCellRect = this.getRectByRowAndColumn(this.targetCell.row, this.targetCell.column);\n    this.setMaskBoxStatus();\n  }\n\n  // occupied list without target tabel cell\n  private setFilteredOccupiedList() {\n    this.filteredOccupiedList = cloneDeep(this.graphInstance.tableController.occupiedList);\n    for (let i = this.targetCell.row; i < this.targetCell.row + this.targetCell.rowSpan; i++) {\n      for (\n        let j = this.targetCell.column;\n        j < this.targetCell.column + this.targetCell.colSpan;\n        j++\n      ) {\n        this.filteredOccupiedList[i][j] = 0;\n      }\n    }\n  }\n\n  // set maskbox position/size/disabled etc.\n  private setMaskBoxStatus() {\n    if (this.graphInstance.tableController.isMovingCell) {\n      this.resultCellPositionAndSize = {\n        row:\n          this.mouseGridRect.rowIndex + this.targetCell.rowSpan >\n          this.graphInstance.options.totalRows\n            ? this.graphInstance.options.totalRows - this.targetCell.rowSpan\n            : this.mouseGridRect.rowIndex,\n        column:\n          this.mouseGridRect.columnIndex + this.targetCell.colSpan >\n          this.graphInstance.options.totalColumns\n            ? this.graphInstance.options.totalColumns - this.targetCell.colSpan\n            : this.mouseGridRect.columnIndex,\n        rowSpan: this.targetCell.rowSpan,\n        colSpan: this.targetCell.colSpan,\n      };\n      this.maskBox.element.classList.add('moving');\n    } else {\n      this.resultCellPositionAndSize = {\n        row: Math.min(this.targetCellRect.rowIndex, this.mouseGridRect.rowIndex),\n        column: Math.min(this.targetCellRect.columnIndex, this.mouseGridRect.columnIndex),\n        rowSpan: Math.abs(this.targetCellRect.rowIndex - this.mouseGridRect.rowIndex) + 1,\n        colSpan: Math.abs(this.targetCellRect.columnIndex - this.mouseGridRect.columnIndex) + 1,\n      };\n      this.maskBox.element.classList.add('resizing');\n    }\n    const topLeftRect = this.getRectByRowAndColumn(\n      this.resultCellPositionAndSize.row,\n      this.resultCellPositionAndSize.column,\n    );\n    const bottomRightRect = this.getRectByRowAndColumn(\n      this.resultCellPositionAndSize.row + this.resultCellPositionAndSize.rowSpan - 1,\n      this.resultCellPositionAndSize.column + this.resultCellPositionAndSize.colSpan - 1,\n    );\n    if (bottomRightRect && topLeftRect) {\n      this.maskBox.setPositinAndSize({\n        left: topLeftRect.left,\n        top: topLeftRect.top,\n        width: bottomRightRect.left - topLeftRect.left + bottomRightRect.width + 1,\n        height: bottomRightRect.top - topLeftRect.top + bottomRightRect.height + 1,\n      });\n    }\n\n    // set maskbox disable/enable\n    let doable = true;\n    for (\n      let i = this.resultCellPositionAndSize.row;\n      i <\n      Math.min(\n        this.resultCellPositionAndSize.row + this.resultCellPositionAndSize.rowSpan,\n        this.graphInstance.options.totalRows,\n      );\n      i++\n    ) {\n      for (\n        let j = this.resultCellPositionAndSize.column;\n        j <\n        Math.min(\n          this.resultCellPositionAndSize.column + this.resultCellPositionAndSize.colSpan,\n          this.graphInstance.options.totalColumns,\n        );\n        j++\n      ) {\n        if (!this.filteredOccupiedList[i] || this.filteredOccupiedList[i][j] > 0) {\n          doable = false;\n        }\n      }\n    }\n    if (doable) {\n      this.maskBox.enable();\n    } else {\n      this.maskBox.disable();\n    }\n  }\n\n  public startMask(targetTableCell: TableCell) {\n    this.element.classList.remove('hidden');\n    this.showMask(targetTableCell);\n  }\n\n  public stopMask() {\n    this.element.classList.add('hidden');\n    removeElement(this.maskBox.element);\n    this.targetCell.setIsTarget(false);\n    this.maskBox = null;\n  }\n\n  public submitChange() {\n    this.stopMask();\n    const targetCellPositionAndSize: CellPositionAndSize = {\n      row: this.targetCell.row,\n      column: this.targetCell.column,\n      rowSpan: this.targetCell.rowSpan,\n      colSpan: this.targetCell.colSpan,\n    };\n    if (!isEqual(this.resultCellPositionAndSize, targetCellPositionAndSize)) {\n      // const oldNode = cloneDeep(this.targetCell.nodeData);\n      this.targetCell.nodeData.row = this.resultCellPositionAndSize.row;\n      this.targetCell.nodeData.column = this.resultCellPositionAndSize.column;\n      this.targetCell.nodeData.rowSpan = this.resultCellPositionAndSize.rowSpan;\n      this.targetCell.nodeData.colSpan = this.resultCellPositionAndSize.colSpan;\n      // 提交变更\n      if (typeof this.graphInstance.options.onEditNode === 'function') {\n        this.graphInstance.options.onEditNode(this.targetCell.nodeData);\n      }\n      this.graphInstance.refresh();\n    }\n  }\n\n  // get tableGridRect of current mouse position at\n  private getMouseRect() {\n    const mouseX = this.graphInstance.mousePosition.x;\n    const mouseY = this.graphInstance.mousePosition.y;\n    let targetGridRect: TableGridRect;\n    this.tableGridRectList.forEach((gridRect) => {\n      if (\n        mouseY > gridRect.top &&\n        mouseY < gridRect.top + gridRect.height &&\n        mouseX > gridRect.left &&\n        mouseX < gridRect.left + gridRect.width\n      ) {\n        targetGridRect = gridRect;\n      }\n    });\n    return targetGridRect;\n  }\n\n  private getRectByRowAndColumn(row, column) {\n    // const targetCellRow = this.targetCell.row;\n    // const targetCellColumn = this.targetCell.column;\n    return this.tableGridRectList.find((gridRect) => {\n      return gridRect.rowIndex === row && gridRect.columnIndex === column;\n    });\n  }\n\n  public onMouseMove() {\n    const newRect = this.getMouseRect();\n    if (!isEqual(newRect, this.mouseGridRect)) {\n      if (newRect) {\n        this.mouseGridRect = newRect;\n        this.setMaskBoxStatus();\n      }\n    }\n  }\n}\n","import { TableFlowGraph, ColumnSpec, RowSpec, TableGridRect } from '../../index';\nimport { createClassElement, removeElement, setStyles } from '../../lib/dom';\nimport TableCell from './TableCell';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableMask from './TableMask';\nimport Button from '../ui/button/Button';\nimport { setColumnAndRowDeletable } from '../../lib/utils';\n\n/**\n * table-flow-graph tabel\n */\nexport default class Table {\n  graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public bottomControlEL: HTMLElement | null;\n  public cells: TableCell[];\n  public headerCells: TableHeaderCell[];\n  public canDeleteColumn: boolean;\n  public canDeleteRow: boolean;\n  public occupiedList: number[][]; // 1: occupied, 0: not occupied\n  public tableMask: TableMask;\n  public isMovingCell: boolean;\n  public isResizingCell: boolean;\n\n  constructor(graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement('table', 'tfgraph-table', this.graphInstance.element);\n    this.initTableStatus();\n  }\n\n  private initTableStatus() {\n    this.headerCells = [];\n    this.cells = [];\n    this.canDeleteColumn = false;\n    this.canDeleteRow = false;\n    this.occupiedList = [];\n    this.isMovingCell = false;\n    this.isResizingCell = false;\n  }\n\n  // render table and set table controls\n  public renderTable() {\n    this.initTableStatus();\n    this.element.innerHTML = '';\n    this.createHeader();\n    this.createTds();\n    this.createCells();\n    this.setControls();\n  }\n\n  public setControls() {\n    const isEditMode = this.graphInstance.mode === 'edit';\n    if (isEditMode) {\n      const deleteableObj = setColumnAndRowDeletable(\n        this.occupiedList,\n        this.graphInstance.options.totalRows,\n        this.graphInstance.options.totalColumns,\n      );\n      this.canDeleteColumn = deleteableObj.canDeleteColumn;\n      this.canDeleteRow = deleteableObj.canDeleteRow;\n\n      this.cells.forEach((cell) => {\n        // set tabel cell controls\n        cell.setEditControls();\n      });\n\n      // wait for table render ready\n      setTimeout(() => {\n        const columnSpecs: ColumnSpec[] = []; // [{left, width, columnIndex}]\n        const rowSpecs: RowSpec[] = []; // [{ top, height, rowIndex}]\n\n        this.headerCells.forEach((headerCell) => {\n          // set headerCell controls\n          headerCell.setEditControls();\n          // get columns's width and position\n          columnSpecs.push({\n            width: headerCell.element.getBoundingClientRect().width + 1,\n            left: headerCell.element.offsetLeft - 1,\n            columnIndex: headerCell.columnIndex,\n          });\n        });\n\n        // get rowSpects(row top position and height)\n        for (let i = 0; i < this.graphInstance.options.totalRows; i++) {\n          const targetCell = this.getMinRowSpanCell(i, 1);\n          const targetCellHeight = targetCell.element.getBoundingClientRect().height;\n          const targetCellRowHeight = targetCellHeight / targetCell.rowSpan;\n          rowSpecs.push({\n            top: targetCell.element.offsetTop - 1 + (i - targetCell.row) * targetCellRowHeight,\n            height: targetCellRowHeight + 1,\n            rowIndex: i,\n          });\n        }\n        // each table grid's left, top, width, height without rowspan and colspan\n        const tableGridRectList: TableGridRect[] = [];\n        rowSpecs.forEach((rowSpec) => {\n          columnSpecs.forEach((columnSpec) => {\n            tableGridRectList.push(Object.assign({}, rowSpec, columnSpec));\n          });\n        });\n        this.tableMask = new TableMask(tableGridRectList, this.graphInstance);\n      }, 1);\n    } else {\n      // click node event\n      this.cells.forEach((cell) => {\n        // set tabel cell controls\n        cell.setViewModeControls();\n      });\n    }\n    this.setBottomControl();\n\n    // set table cell controls\n    // 1. remove last row ✓\n    // 2. empty cell: add node ✓\n    // 3. node cell: edit node content ✓\n    // 4. node cell: adjust node size ✓\n    // 5. node cell: move node position ✓\n  }\n\n  //  recursively find min rowspan cell for targetRow\n  getMinRowSpanCell(row: number, minRowSpan = 1) {\n    let targetRowCell: TableCell | null = null;\n    const rowCells = this.cells.filter((cell) => cell.row === row);\n    if (rowCells.length === 0) {\n      if (row > 0) {\n        targetRowCell = this.getMinRowSpanCell(row - 1, minRowSpan + 1);\n      }\n    } else {\n      let rowSpan = 20;\n      rowCells.forEach((cell) => {\n        if (cell.rowSpan < rowSpan && cell.rowSpan >= minRowSpan) {\n          rowSpan = cell.rowSpan;\n          targetRowCell = cell;\n        }\n      });\n    }\n    return targetRowCell;\n  }\n\n  public onMouseMove() {\n    if (this.isMovingCell || this.isResizingCell) {\n      this.tableMask.onMouseMove();\n    }\n  }\n\n  public startMoving(targetCell: TableCell) {\n    this.isMovingCell = true;\n    this.graphInstance.toolbar.hintMgr.setHint('moveNode');\n    this.graphInstance.toolbar.disable();\n    this.tableMask.startMask(targetCell);\n  }\n\n  public stopMoving() {\n    this.isMovingCell = false;\n    this.graphInstance.toolbar.hintMgr.setHint('idel');\n    this.graphInstance.toolbar.enable();\n    this.tableMask.stopMask();\n  }\n\n  public startResizing(targetCell: TableCell) {\n    this.isResizingCell = true;\n    this.graphInstance.toolbar.hintMgr.setHint('resizeNode');\n    this.graphInstance.toolbar.disable();\n    this.tableMask.startMask(targetCell);\n  }\n\n  public stopResizing() {\n    this.isResizingCell = false;\n    this.graphInstance.toolbar.hintMgr.setHint('idel');\n    this.graphInstance.toolbar.enable();\n    this.tableMask.stopMask();\n  }\n\n  // sumit cell position / size change\n  public submitCellChange() {\n    this.isMovingCell = false;\n    this.isResizingCell = false;\n    this.graphInstance.toolbar.enable();\n    this.tableMask.submitChange();\n  }\n\n  public setBottomControl() {\n    if (\n      this.graphInstance.mode === 'edit' &&\n      !this.bottomControlEL &&\n      this.graphInstance.options.totalRows < this.graphInstance.options.maxRows\n    ) {\n      this.bottomControlEL = createClassElement(\n        'div',\n        'flex flex-row items-center justify-between mt-15',\n        this.graphInstance.element,\n      );\n      // add row btn\n      new Button(this.bottomControlEL, {\n        icon: 'plus',\n        label: this.graphInstance.options.labels.addRow,\n        className: 'flex-1',\n        onClick: () => {\n          if (typeof this.graphInstance.options.addRow === 'function') {\n            this.graphInstance.options.addRow();\n          } else {\n            this.graphInstance.refresh(\n              Object.assign({}, this.graphInstance.options, {\n                totalRows: this.graphInstance.options.totalRows + 1,\n              }),\n            );\n            if (typeof this.graphInstance.options.onAddRow === 'function') {\n              this.graphInstance.options.onAddRow();\n            }\n          }\n        },\n      });\n    } else {\n      if (this.bottomControlEL) {\n        removeElement(this.bottomControlEL);\n        this.bottomControlEL = null;\n      }\n    }\n  }\n\n  // render table header\n  createHeader() {\n    if (this.graphInstance.options.tableLayoutFixed) {\n      setStyles(this.element, { tableLayout: 'fixed' });\n    }\n    if (this.graphInstance.options.columns && this.graphInstance.options.columns.length > 0) {\n      const tr = createClassElement('tr', 'tfgraph-tr');\n      this.graphInstance.options.columns.forEach((column, index) => {\n        const headerCell = new TableHeaderCell(tr, column, index, this.graphInstance);\n        this.headerCells.push(headerCell);\n      });\n      this.element.appendChild(tr);\n    }\n  }\n\n  // render table rows and tds\n  createTds() {\n    for (let i = 0; i < this.graphInstance.options.totalRows; i++) {\n      const tr = createClassElement('tr', 'tfgraph-tr');\n      tr.setAttribute('id', `${this.graphInstance.id}_tr_${i}`);\n      const occupiedRow: number[] = [];\n      this.occupiedList.push(occupiedRow);\n      for (let j = 0; j < this.graphInstance.options.totalColumns; j++) {\n        const td = createClassElement('td', 'tfgraph-td', tr);\n        td.setAttribute('id', `${this.graphInstance.id}_td_${i}_${j}`);\n        occupiedRow.push(0);\n      }\n      this.element.appendChild(tr);\n    }\n  }\n\n  // render tabel cells\n  createCells() {\n    // spaned table cell id array\n    const spanedTdIds = [];\n    const nodes = this.graphInstance.options.nodes;\n    if (nodes && nodes.length > 0) {\n      nodes.forEach((node) => {\n        // set spanned tabel cell ids\n        if (node.colSpan > 1 || node.rowSpan > 1) {\n          for (let i = node.column; i < node.column + node.colSpan; i++) {\n            for (let j = node.row; j < node.row + node.rowSpan; j++) {\n              if (!(i === node.column && j === node.row)) {\n                spanedTdIds.push(`${this.graphInstance.id}_td_${j}_${i}`);\n                this.occupiedList[j][i] = 1;\n              }\n            }\n          }\n        }\n      });\n    }\n\n    // remove spaned tabell cell element\n    spanedTdIds.forEach((id) => removeElement(document.getElementById(id)));\n\n    // create table cells\n    for (let i = 0; i < this.graphInstance.options.totalRows; i++) {\n      for (let j = 0; j < this.graphInstance.options.totalColumns; j++) {\n        if (!spanedTdIds.includes(`${this.graphInstance.id}_td_${i}_${j}`)) {\n          const targetNode =\n            nodes && nodes.length > 0\n              ? nodes.find((node) => node.row === i && node.column === j)\n              : null;\n          const targetTd = document.getElementById(`${this.graphInstance.id}_td_${i}_${j}`);\n          if (targetNode) {\n            targetTd.setAttribute('colSpan', targetNode.colSpan.toString());\n            targetTd.setAttribute('rowSpan', targetNode.rowSpan.toString());\n            this.occupiedList[i][j] = 1;\n          }\n          this.cells.push(new TableCell(targetTd, targetNode, i, j, this.graphInstance));\n        }\n      }\n    }\n  }\n}\n","// import { TableFlowGraph } from '../index';\nimport { createClassElement, removeElement } from '../../lib/dom';\nimport { LineOptions, Position } from '../../index';\nimport LineGroup from './LineGroup';\n\n/**\n * table-flow-graph line\n */\nexport default class LineSegment {\n  public element: HTMLElement;\n  public thickness: number;\n  public startPointEl: HTMLElement;\n  public endArrowEl: HTMLElement;\n\n  constructor(parent: LineGroup, options: LineOptions) {\n    this.element = createClassElement('div', 'tfgraph-line', parent.element);\n    const { positionA, positionB, thickness = 2, isStart = true, isEnd = true } = options;\n    this.thickness = thickness;\n    if (isStart) this.toggleStartPoint();\n    if (isEnd) this.toggleEndArrow();\n    this.drawLine(positionA, positionB);\n    this.element.addEventListener('mouseenter', () => parent.setHovered(true));\n    this.element.addEventListener('mouseleave', () => parent.setHovered(false));\n    this.element.addEventListener('dblclick', () => parent.onDoubleClick());\n  }\n\n  public setHoverd(hovered = true) {\n    if (hovered) {\n      this.element.classList.add('hovered');\n    } else {\n      this.element.classList.remove('hovered');\n    }\n  }\n\n  public drawLine(positionA: Position, positionB: Position) {\n    // start point\n    const x1 = positionA.x;\n    const y1 = positionA.y;\n    // end point\n    const x2 = positionB.x;\n    const y2 = positionB.y;\n\n    // distance\n    const length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n\n    // center\n    const cx = (x1 + x2) / 2 - length / 2;\n    const cy = (y1 + y2) / 2 - this.thickness / 2;\n    // angle\n    const angle = Math.atan2(y2 - y1, x2 - x1) * (180 / Math.PI);\n\n    this.element.style.width = length + this.thickness + 'px';\n    this.element.style.height = this.thickness + 'px';\n    this.element.style.left = cx - 0.5 * this.thickness + 'px';\n    this.element.style.top = cy + 'px';\n    this.element.style.borderRadius = this.thickness + 'px';\n    this.element.style.transform = `rotate(${angle}deg)`;\n  }\n\n  public toggleStartPoint() {\n    if (this.startPointEl) {\n      removeElement(this.startPointEl);\n    } else {\n      this.startPointEl = createClassElement('div', 'start-point', this.element);\n    }\n  }\n\n  public toggleEndArrow() {\n    if (this.endArrowEl) {\n      removeElement(this.endArrowEl);\n    } else {\n      this.endArrowEl = createClassElement('div', 'arrow', this.element);\n    }\n  }\n}\n","import { TableFlowGraph, LineGroupOptions, Position } from '../../index';\nimport { createClassElement, removeElement } from '../../lib/dom';\nimport Anchor from '../anchor/Anchor';\nimport LineSegment from './LineSegment';\n\n/**\n * table-flow-graph line group\n */\nexport default class LineGroup {\n  public element: HTMLElement;\n  public isDrawingActive: boolean;\n  public anchorIds: string[];\n  public anchors: Anchor[];\n  public cursorLine: LineSegment; // line currently drawing at end\n  public lines: LineSegment[];\n  public cursorLineStartPosition: Position;\n  public graphInstance: TableFlowGraph;\n  public hovered: boolean; // is mouse hover\n\n  constructor(\n    parentElement: HTMLElement,\n    options: LineGroupOptions,\n    graphInstance: TableFlowGraph,\n  ) {\n    this.element = createClassElement('div', 'tfgraph-line-group', parentElement);\n    this.isDrawingActive = options.isDrawingActive;\n    this.anchorIds = options.anchorIds;\n    this.graphInstance = graphInstance;\n    this.drawLines();\n  }\n\n  public addLineSegment(anchorId) {\n    if (!this.anchorIds.includes(anchorId)) {\n      this.anchorIds.push(anchorId);\n      this.drawLines();\n    }\n  }\n\n  public onDoubleClick() {\n    if (this.hovered) {\n      if (this.isDrawingActive) {\n        this.graphInstance.lineController.endDrawLine();\n      } else {\n        this.graphInstance.lineController.removeLineGroup(this);\n      }\n    }\n  }\n\n  public drawLines() {\n    this.anchors = [];\n    this.lines = [];\n    if (this.anchorIds.length === 0) return;\n    this.anchorIds.forEach((anchorId) => {\n      const targetAnchor = this.graphInstance.anchorController.anchors.find(\n        (anchor) => anchor.id === anchorId,\n      );\n      if (targetAnchor) {\n        this.anchors.push(targetAnchor);\n      }\n    });\n    this.element.innerHTML = '';\n    const pointList: Position[] = this.anchors.map((anchor) => ({\n      x: anchor.posX,\n      y: anchor.posY,\n    }));\n    if (pointList.length > 1) {\n      for (let i = 0; i < pointList.length - 1; i++) {\n        const line = new LineSegment(this, {\n          positionA: pointList[i],\n          positionB: pointList[i + 1],\n          thickness: 2,\n          isStart: i === 0,\n          isEnd: i === pointList.length - 2 && !this.isDrawingActive,\n        });\n        this.lines.push(line);\n      }\n    }\n    // add line between last anchor position and mouse position when drawing\n    if (this.isDrawingActive) {\n      this.cursorLineStartPosition = pointList[pointList.length - 1];\n      // draw cursor line\n      this.cursorLine = new LineSegment(this, {\n        positionA: this.cursorLineStartPosition,\n        positionB: this.graphInstance.mousePosition,\n        thickness: 2,\n        isStart: pointList.length === 0,\n        isEnd: true,\n      });\n      this.lines.push(this.cursorLine);\n    }\n  }\n\n  public setHovered(hovered = true) {\n    if (this.graphInstance.mode === 'edit') {\n      this.hovered = hovered;\n      this.lines.forEach((line) => {\n        line.setHoverd(hovered);\n      });\n      if (!this.isDrawingActive) {\n        this.graphInstance.toolbar.hintMgr.setHint(hovered ? 'hoverLine' : 'idel');\n      }\n    }\n  }\n\n  public endDrawing() {\n    // removeElement(this.cursorLine.element);\n    this.isDrawingActive = false;\n    this.drawLines();\n  }\n\n  public escapeDrawing() {\n    if (this.cursorLine) {\n      if (this.anchorIds.length > 0) {\n        this.anchorIds.pop();\n        if (this.anchorIds.length === 0) {\n          removeElement(this.element);\n          // remove the last anchor id in this line group\n          this.graphInstance.lineController.lineAnchorIds =\n            this.graphInstance.lineController.lineAnchorIds.filter(\n              (lineArray) => lineArray.length > 1,\n            );\n          this.graphInstance.lineController.endDrawLine();\n        } else {\n          this.drawLines();\n        }\n      }\n    }\n  }\n\n  public onMouseMove(graphInstance: TableFlowGraph) {\n    if (this.cursorLine) {\n      let targetPosition = graphInstance.mousePosition;\n      // snap to hovered anchor\n      if (\n        graphInstance.anchorController.hoveredAnchor &&\n        !this.anchorIds.includes(graphInstance.anchorController.hoveredAnchor.id)\n      ) {\n        targetPosition = {\n          x: graphInstance.anchorController.hoveredAnchor.posX,\n          y: graphInstance.anchorController.hoveredAnchor.posY,\n        };\n      }\n      this.cursorLine.drawLine(this.cursorLineStartPosition, targetPosition);\n    }\n  }\n}\n","import { cloneDeep, isEqual } from 'lodash-es';\nimport { TableFlowGraph } from '../../index';\nimport { createClassElement, removeElement, setStyles } from '../../lib/dom';\nimport LineGroup from './LineGroup';\n\n/**\n * table-flow-graph lines controller\n */\nexport default class LineController {\n  public element: HTMLElement;\n  public lineAnchorIds: string[][]; // anchor ids to draw lines\n  public originLineAnchorIds: string[][]; // compare to lineAnchorIds to determine if lines are changed\n  public isDrawingLine: boolean;\n  public currentDrawingLine: LineGroup;\n  public graphInstance: TableFlowGraph;\n  public canDeleteColumn: boolean;\n  public canDeleteRow: boolean;\n\n  constructor(graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement('div', 'tfgraph-line-layer', this.graphInstance.element);\n    const { options } = this.graphInstance;\n    // this.options.mode = options.mode ? options.mode : 'view';\n    if (options.lines && Array.isArray(options.lines)) {\n      this.lineAnchorIds = options.lines;\n    } else {\n      this.lineAnchorIds = [];\n    }\n    this.originLineAnchorIds = cloneDeep(this.lineAnchorIds);\n  }\n\n  public renderLines() {\n    this.element.innerHTML = '';\n    this.lineAnchorIds.forEach((lineGroup) => {\n      new LineGroup(\n        this.element,\n        { anchorIds: lineGroup, isDrawingActive: false },\n        this.graphInstance,\n      );\n    });\n    this.setColAndRowDeletable();\n  }\n\n  public startDrawLine() {\n    this.isDrawingLine = true;\n    this.graphInstance.toolbar.disable();\n    this.graphInstance.toolbar.hintMgr.setHint('drawLine');\n    // set lines layer below anchors layer when draing line\n    setStyles(this.element, { zIndex: '1' });\n    setStyles(this.graphInstance.anchorController.element, { zIndex: '2' });\n\n    this.originLineAnchorIds = cloneDeep(this.lineAnchorIds);\n  }\n\n  public endDrawLine() {\n    this.isDrawingLine = false;\n    this.graphInstance.toolbar.enable();\n    // set lines layer above anchors layer when draing line\n    setStyles(this.element, { zIndex: '2' });\n    setStyles(this.graphInstance.anchorController.element, { zIndex: '1' });\n\n    if (this.currentDrawingLine) {\n      this.currentDrawingLine.endDrawing();\n      if (this.currentDrawingLine.anchorIds.length <= 1) {\n        this.removeLineGroup(this.currentDrawingLine);\n      }\n      this.currentDrawingLine = undefined;\n    }\n    if (!isEqual(this.originLineAnchorIds, this.lineAnchorIds)) {\n      this.originLineAnchorIds = cloneDeep(this.lineAnchorIds);\n      // trigger event: linesChanged\n      this.onChangeLines();\n    }\n  }\n\n  setColAndRowDeletable() {\n    const totalRows = this.graphInstance.options.totalRows;\n    const totalColumns = this.graphInstance.options.totalColumns;\n    this.canDeleteColumn = true;\n    this.canDeleteRow = true;\n    this.lineAnchorIds.forEach((line) => {\n      line.forEach((id) => {\n        const idArray = id.split('_');\n        const row = idArray[1];\n        const col = idArray[2];\n        if (parseInt(col) === totalColumns - 1) {\n          this.canDeleteColumn = false;\n        }\n        if (parseInt(row) === totalRows - 1) {\n          this.canDeleteRow = false;\n        }\n      });\n    });\n  }\n\n  public onChangeLines() {\n    this.setColAndRowDeletable();\n    this.graphInstance.options = Object.assign({}, this.graphInstance.options, {\n      lines: this.lineAnchorIds,\n    });\n    this.graphInstance.toolbar.hintMgr.setHint('idel');\n    if (typeof this.graphInstance.options.onChangeLines === 'function') {\n      this.graphInstance.options.onChangeLines(this.lineAnchorIds);\n    }\n  }\n\n  public removeLineGroup(line: LineGroup) {\n    removeElement(line.element);\n    this.lineAnchorIds = this.lineAnchorIds.filter((lines) => !isEqual(lines, line.anchorIds));\n    if (!isEqual(this.lineAnchorIds, this.originLineAnchorIds)) {\n      this.originLineAnchorIds = cloneDeep(this.lineAnchorIds);\n      // trigger event: linesChanged\n      this.onChangeLines();\n    }\n  }\n\n  public createLineGroup(anchorId) {\n    this.startDrawLine();\n    this.lineAnchorIds.push([anchorId]);\n    this.currentDrawingLine = new LineGroup(\n      this.element,\n      { anchorIds: this.lineAnchorIds[this.lineAnchorIds.length - 1], isDrawingActive: true },\n      this.graphInstance,\n    );\n  }\n\n  public addLineSegment(anchorId) {\n    if (this.isDrawingLine && this.currentDrawingLine) {\n      this.currentDrawingLine.addLineSegment(anchorId);\n    }\n  }\n\n  public onMouseMove() {\n    if (this.isDrawingLine && this.currentDrawingLine) {\n      this.currentDrawingLine.onMouseMove(this.graphInstance);\n    }\n  }\n}\n","import { TableFlowGraph, Bearing } from '../../index';\nimport { createClassElement } from '../../lib/dom';\n\n// | 'topleft'\n// | 'top'\n// | 'topright'\n// | 'left'\n// | 'center'\n// | 'right'\n// | 'bottomleft'\n// | 'bottom'\n// | 'bottomright';\n\nconst getBearingShort = (bearing: Bearing) => {\n  let shortBearing = 't';\n  switch (bearing) {\n    case 'topleft':\n      shortBearing = 'tl';\n      break;\n    case 'top':\n      shortBearing = 't';\n      break;\n    case 'topright':\n      shortBearing = 'tr';\n      break;\n    case 'left':\n      shortBearing = 'l';\n      break;\n    case 'center':\n      shortBearing = 'c';\n      break;\n    case 'right':\n      shortBearing = 'r';\n      break;\n    case 'bottomleft':\n      shortBearing = 'bl';\n      break;\n    case 'bottom':\n      shortBearing = 'b';\n      break;\n    case 'bottomright':\n      shortBearing = 'br';\n      break;\n    default:\n      break;\n  }\n  return shortBearing;\n};\n\n/**\n * Anchor point for drawing lines\n */\nexport default class Anchor {\n  // element of this Anchor\n  public element: HTMLElement;\n  // the bearing relative to this anchor's parent table cell\n  public bearing: Bearing;\n  public elementTr: HTMLElement;\n  public elementCol: HTMLElement;\n  // is the anchor on table cell border or on inner block border(top / bottom)\n  public isOffsetX: boolean;\n  // is the anchor on table cell border or on inner block border(left / right)\n  public isOffsetY: boolean;\n  // id for this Anchor class\n  public id = '';\n  // x position relative to table area\n  public posX = 0;\n  // y position relative to table area\n  public posY = 0;\n  public row: number;\n  public column: number;\n  public hidden = false;\n\n  constructor(\n    bearing: Bearing,\n    row: number,\n    column: number,\n    graphInstance: TableFlowGraph,\n    isOffsetX = false,\n    isOffsetY = false,\n  ) {\n    this.bearing = bearing;\n    this.isOffsetX = isOffsetX;\n    this.isOffsetY = isOffsetY;\n    this.row = row;\n    this.column = column;\n    this.elementTr = document.getElementById(`${graphInstance.id}_tr_${row}`);\n    this.elementCol = document.getElementById(`${graphInstance.id}_col_${column}`);\n    if (this.elementTr && this.elementCol) {\n      // create dom elements\n      this.element = createClassElement(\n        'div',\n        'tfgraph-anchor',\n        graphInstance.anchorController.element,\n      );\n      createClassElement('div', 'tfgraph-anchor-point', this.element);\n      const area = createClassElement('div', 'tfgraph-anchor-area', this.element);\n      createClassElement('div', 'tfgraph-anchor-circle', area);\n\n      // set Anchor instance id; 'ox' meaning offsetX, 'nx' meaning normalX\n      this.id = `a_${row}_${column}_${getBearingShort(bearing)}_${isOffsetX ? 'ox' : 'nx'}_${\n        isOffsetY ? 'oy' : 'ny'\n      }`;\n      // set dom id\n      this.element.setAttribute('id', `${graphInstance.id}_${this.id}`);\n\n      graphInstance.anchorController.anchors.push(this);\n      this.setVisible(graphInstance.mode === 'edit');\n      // setTimeout(() => this.setPosition(), 1);\n      this.setPosition();\n      this.element.addEventListener('click', () => {\n        if (!graphInstance.lineController.isDrawingLine) {\n          graphInstance.lineController.createLineGroup(this.id);\n        } else {\n          graphInstance.lineController.addLineSegment(this.id);\n        }\n      });\n      this.element.addEventListener('mouseenter', () => {\n        graphInstance.anchorController.setHoveredAnchor(this);\n      });\n      this.element.addEventListener('mouseleave', () => {\n        if (graphInstance.anchorController.hoveredAnchor.id === this.id) {\n          graphInstance.anchorController.setHoveredAnchor(null);\n        }\n      });\n      // dblclick to finish drawing lines\n      this.element.addEventListener('dblclick', () => {\n        if (graphInstance.lineController.isDrawingLine) {\n          graphInstance.lineController.endDrawLine();\n        }\n      });\n    }\n  }\n\n  setOnePosition(x, y) {\n    this.posX = x;\n    this.posY = y;\n    this.element.style.left = x + 'px';\n    this.element.style.top = y + 'px';\n    this.element.setAttribute('title', `xpos & ypos=${x},${y}`);\n  }\n\n  public setVisible(visible: boolean) {\n    if (visible) {\n      this.element.classList.remove('hidden');\n    } else {\n      this.element.classList.add('hidden');\n    }\n  }\n\n  public setPosition() {\n    const x_left = this.elementCol.offsetLeft + (this.isOffsetX ? 15 : 0);\n    const x_center = this.elementCol.offsetLeft + 0.5 * this.elementCol.offsetWidth;\n    const x_right =\n      this.elementCol.offsetLeft + this.elementCol.offsetWidth - (this.isOffsetX ? 15 : 0);\n    const y_top = this.elementTr.offsetTop + (this.isOffsetY ? 15 : 0);\n    const y_center = this.elementTr.offsetTop + 0.5 * this.elementTr.offsetHeight;\n    const y_bottom =\n      this.elementTr.offsetTop + this.elementTr.offsetHeight - (this.isOffsetY ? 15 : 0);\n\n    switch (this.bearing) {\n      case 'topleft':\n        this.setOnePosition(x_left, y_top);\n        break;\n      case 'top':\n        this.setOnePosition(x_center, y_top);\n        break;\n      case 'topright':\n        this.setOnePosition(x_right, y_top);\n        break;\n      case 'right':\n        this.setOnePosition(x_right, y_center);\n        break;\n      case 'bottomright':\n        this.setOnePosition(x_right, y_bottom);\n        break;\n      case 'bottom':\n        this.setOnePosition(x_center, y_bottom);\n        break;\n      case 'bottomleft':\n        this.setOnePosition(x_left, y_bottom);\n        break;\n      case 'left':\n        this.setOnePosition(x_left, y_center);\n        break;\n      case 'center':\n        this.setOnePosition(x_center, y_center);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport TableCell from '../table/TableCell';\nimport Anchor from './Anchor';\n\n/**\n * table-flow-graph anchor controller\n */\nexport default class AnchorController {\n  public element: HTMLElement;\n  public anchors: Anchor[];\n  public hoveredAnchor: Anchor | null; // current Anchor that mouse hoverd\n  graphInstance: TableFlowGraph;\n\n  constructor(graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.anchors = [];\n    this.element = createClassElement('div', 'tfgraph-anchor-layer', graphInstance.element);\n  }\n\n  public renderAnchors() {\n    this.element.innerHTML = '';\n    this.anchors = [];\n    this.graphInstance.tableController.cells.forEach((cell) => {\n      // console.log('cell:::::::::::', cell);\n      this.createAnchors(cell);\n    });\n  }\n\n  public setHoveredAnchor(anchor: Anchor | null) {\n    this.hoveredAnchor = anchor;\n    if (!this.graphInstance.lineController.isDrawingLine) {\n      if (anchor) {\n        this.graphInstance.toolbar.hintMgr.setHint('hoverAnchor');\n      } else {\n        this.graphInstance.toolbar.hintMgr.setHint('idel');\n      }\n    }\n  }\n\n  public resetPosition() {\n    if (this.anchors && this.anchors.length > 0) {\n      this.anchors.forEach((anchor) => {\n        anchor.setPosition();\n      });\n    }\n  }\n\n  public setAnchorsVisible(visible: boolean) {\n    if (this.anchors && this.anchors.length > 0) {\n      this.anchors.forEach((anchor: Anchor) => {\n        anchor.setVisible(visible);\n      });\n    }\n  }\n\n  // create anchors for one cell\n  createAnchors(cell: TableCell) {\n    for (let row = cell.row; row < cell.row + cell.rowSpan; row++) {\n      for (let col = cell.column; col < cell.column + cell.colSpan; col++) {\n        if (row === 0) {\n          new Anchor('top', row, col, this.graphInstance);\n          new Anchor('topright', row, col, this.graphInstance);\n          if (cell.column === 0) {\n            new Anchor('topleft', row, col, this.graphInstance);\n          }\n        }\n        if (col === 0) {\n          new Anchor('left', row, col, this.graphInstance);\n          new Anchor('bottomleft', row, col, this.graphInstance);\n        }\n        if (col === cell.column + cell.colSpan - 1) {\n          new Anchor('right', row, col, this.graphInstance);\n        }\n        if (row === cell.row + cell.rowSpan - 1) {\n          new Anchor('bottom', row, col, this.graphInstance);\n        }\n        if (col === cell.column + cell.colSpan - 1 || row === cell.row + cell.rowSpan - 1) {\n          new Anchor('bottomright', row, col, this.graphInstance);\n        }\n        if (cell.hasNode) {\n          if (col === cell.column) {\n            new Anchor('left', row, col, this.graphInstance, true, false);\n            if (row < cell.row + cell.rowSpan - 1) {\n              new Anchor('bottomleft', row, col, this.graphInstance, true, false);\n            }\n          }\n          if (col === cell.column + cell.colSpan - 1) {\n            new Anchor('right', row, col, this.graphInstance, true, false);\n            if (row < cell.row + cell.rowSpan - 1) {\n              new Anchor('bottomright', row, col, this.graphInstance, true, false);\n            }\n          }\n          if (row === cell.row) {\n            new Anchor('top', row, col, this.graphInstance, false, true);\n            if (col < cell.column + cell.colSpan - 1) {\n              new Anchor('topright', row, col, this.graphInstance, false, true);\n            }\n          }\n          if (row === cell.row + cell.rowSpan - 1) {\n            new Anchor('bottom', row, col, this.graphInstance, false, true);\n            if (col < cell.column + cell.colSpan - 1) {\n              new Anchor('bottomright', row, col, this.graphInstance, false, true);\n            }\n          }\n        }\n      }\n    }\n    if (!cell.hasNode) {\n      new Anchor('center', cell.row, cell.column, this.graphInstance);\n    }\n  }\n}\n","import './styles/index.scss';\nimport { createClassElement, setStyles } from './lib/dom';\nimport { debounce } from './lib/utils';\nimport Toolbar from './components/toolbar/Toolbar';\nimport TableController from './components/table/TableController';\nimport LineController from './components/line/LineController';\nimport AnchorController from './components/anchor/AnchorController';\n\n// default options\nconst defaultOptions: TFGraphOptions = {\n  totalColumns: 8,\n  totalRows: 8,\n  maxColumns: 12,\n  maxRows: 30,\n  labels: {\n    editMode: 'Edit Mode',\n    previewMode: 'Preview Mode',\n    editColumn: 'Edit Column',\n    addColumn: 'Add Column',\n    deleteColumn: 'Delete Column',\n    addRow: 'Add Row',\n    deleteRow: 'Delete Row',\n    editNode: 'Edit Node',\n    addNode: 'Add Node',\n    deleteNode: 'Delete Node',\n    adjustNodeSize: 'Adjust Node Size',\n    moveNode: 'Move Node',\n    newNode: 'New Node',\n    enterNodeName: 'Enter node name',\n    enterColumnName: 'Enter column name',\n    confirm: 'Confirm',\n    cancel: 'Cancel',\n    hint_drawLine:\n      'Click another anchor to draw new line segment; press [ESC] to undo prev line segment; press [ENTER] or double click left mouse to finish drawing',\n    hint_hoverLine: 'Double click to delete this line',\n    hint_hoverAnchor: 'Click to start drawing lines',\n    hint_moveNode: 'Move cursor to move this node, click left mouse to confrim moving',\n    hint_resizeNode: 'Move cursor to resize this node, click left mouse to confrim resizing',\n  },\n};\n\nexport class TableFlowGraph {\n  public element: HTMLElement;\n  public baseElement: HTMLElement;\n  public options: TFGraphOptions;\n  public id: string;\n  public toolbar: Toolbar;\n  public isAlive: boolean;\n  public hasTableHeader: boolean;\n  public mode: Mode;\n  public mousePosition: Position;\n  public tableController: TableController;\n  public lineController: LineController;\n  public anchorController: AnchorController;\n\n  constructor(el: HTMLElement, options: TFGraphOptions) {\n    if (!el) {\n      throw new Error('no element is specified to initialize TableFlowGraph');\n    } else {\n      this.baseElement = el;\n      this.baseElement.classList.add('tfgraph-wrapper');\n    }\n\n    // use id as unique key, to support multiple table-flow-graph instances in one page.\n    if (this.baseElement.getAttribute('id')) {\n      this.id = this.baseElement.getAttribute('id');\n    } else {\n      this.id = 'id' + (Math.random() * 100000).toFixed(0);\n    }\n\n    this.init(options);\n\n    window.addEventListener('resize', this, false);\n    window.addEventListener('keydown', this, false);\n    window.addEventListener('mousemove', this, false);\n\n    this.isAlive = true;\n  }\n\n  public init(options: TFGraphOptions) {\n    this.baseElement.innerHTML = '';\n\n    this.options = Object.assign({}, defaultOptions, options);\n    if (options.labels) {\n      this.options.labels = Object.assign({}, defaultOptions.labels, options.labels);\n    }\n    // set totalRows\n    // if (typeof this.options.rows !== 'undefined') {\n    //   this.options.totalRows = this.options.rows.length;\n    // }\n    // set totalColumns and hasTableHeader\n    if (this.options.columns && this.options.columns.length > 0) {\n      this.options.totalColumns = this.options.columns.length;\n      this.hasTableHeader = true;\n    } else {\n      this.options.columns = [];\n      this.hasTableHeader = false;\n      for (let i = 0; i < this.options.totalColumns; i++) {\n        this.options.columns.push({\n          width: 'auto',\n        });\n      }\n    }\n\n    // restrain totalRows and totalColumns\n    if (this.options.totalRows > this.options.maxRows) {\n      this.options.totalRows = this.options.maxRows;\n    }\n    if (this.options.totalColumns > this.options.maxColumns) {\n      this.options.totalColumns = this.options.maxColumns;\n    }\n\n    // filter nodes that exceeds totalRows and totalColumns\n    if (this.options.nodes && this.options.nodes.length > 0) {\n      this.options.nodes = this.options.nodes.filter(\n        (node) =>\n          node.row + node.rowSpan - 1 <= this.options.totalRows &&\n          node.column + node.colSpan - 1 <= this.options.totalColumns,\n      );\n    }\n\n    // create toolbar and edit state\n    if (this.options.isEditor) {\n      this.mode = 'edit';\n      this.toolbar = new Toolbar(this.baseElement, this);\n    } else {\n      this.mode = 'preview';\n    }\n\n    // create root dom elements and controllers\n    this.element = createClassElement('div', 'tfgraph', this.baseElement);\n    if (this.mode === 'edit') this.element.classList.add('edit');\n    this.lineController = new LineController(this);\n    this.anchorController = new AnchorController(this);\n    this.tableController = new TableController(this);\n\n    this.render();\n  }\n\n  public render() {\n    // render table\n    this.tableController.renderTable();\n\n    // wait for table render ready; TODO set anchor position relative to table cells\n    setTimeout(() => {\n      // render anchors\n      this.anchorController.renderAnchors();\n      // render lines\n      this.lineController.renderLines();\n    }, 1);\n  }\n\n  handleResize = () => {\n    // TODO detailed resize management\n    // this.anchorController.resetPosition();\n    this.refresh();\n  };\n  debouncedHandleResize = debounce(this.handleResize, 500);\n\n  // handle addEventListener events\n  handleEvent(event) {\n    switch (event.type) {\n      case 'resize':\n        this.debouncedHandleResize();\n        break;\n      case 'mousemove':\n        this.onMourseMove(event);\n        break;\n      case 'keydown':\n        this.onKeydown(event);\n        break;\n      default:\n        break;\n    }\n  }\n\n  onMourseMove(event) {\n    const rect = this.element.getBoundingClientRect();\n    const offsetX = event.clientX - rect.left;\n    const offsetY = event.clientY - rect.top;\n    this.mousePosition = { x: offsetX, y: offsetY };\n    this.lineController.onMouseMove();\n    this.tableController.onMouseMove();\n  }\n\n  onKeydown = (e) => {\n    if (e.code === 'Enter') {\n      // press enter to finish drawing line\n      if (this.lineController.isDrawingLine) {\n        this.lineController.endDrawLine();\n      }\n    } else if (e.code === 'Escape') {\n      // press esc to cancel last anchor point when drawing line\n      if (this.lineController.isDrawingLine) {\n        this.lineController.currentDrawingLine.escapeDrawing();\n      }\n      if (this.tableController.isMovingCell) {\n        this.tableController.stopMoving();\n      }\n      if (this.tableController.isResizingCell) {\n        this.tableController.stopResizing();\n      }\n    }\n  };\n\n  public refresh(options?: TFGraphOptions) {\n    if (!this.isAlive) {\n      return;\n    } else {\n      setTimeout(() => {\n        const height = this.baseElement.getBoundingClientRect().height;\n        // maintain consistent height when rerendering dom elements\n        setStyles(this.baseElement, { height: height + 'px' });\n        this.init(options ? options : this.options);\n        setStyles(this.baseElement, { height: 'auto' });\n      });\n    }\n  }\n\n  public destroy() {\n    if (!this.isAlive) {\n      return;\n    }\n\n    window.removeEventListener('resize', this, false);\n    window.removeEventListener('keydown', this, false);\n    window.removeEventListener('mousemove', this, false);\n\n    this.isAlive = false;\n  }\n\n  public changeMode(mode: Mode) {\n    if (this.mode !== mode) {\n      this.mode = mode;\n      if (mode === 'edit') {\n        this.element.classList.add('edit');\n      } else {\n        this.element.classList.remove('edit');\n      }\n      this.anchorController.setAnchorsVisible(mode === 'edit');\n      this.tableController.renderTable();\n    }\n  }\n}\n\nexport type ColumnWidth = 'auto' | 'lg' | 'md' | 'sm' | 'xs';\n\n// table column header data\nexport interface TFGraphColumn {\n  id?: string;\n  title?: string;\n  width?: ColumnWidth | string;\n}\n\n// table row header data\nexport interface TFGraphRow {\n  id?: string;\n  title: string;\n}\n\n// node data\nexport interface TFGraphNode {\n  id: string | number;\n  title: string;\n  row: number;\n  column: number;\n  colSpan: number;\n  rowSpan: number;\n  type?: 'default' | 'success' | 'warning' | 'danger' | 'primary';\n  isBtn?: boolean;\n  meta?: Record<string, unknown>;\n  showPopup?: boolean;\n}\n\n// export interface ThemeOption {\n//   borderColor: string;\n//   titleColor: string;\n//   backgroundColor: string;\n// }\n\n// export interface Theme {\n//   default: ThemeOption;\n//   success: ThemeOption;\n//   warning: ThemeOption;\n//   danger: ThemeOption;\n//   primary: ThemeOption;\n// }\n\nexport type Mode = 'edit' | 'preview';\n\n// labels for ui\nexport type Labels = {\n  editMode?: string;\n  previewMode?: string;\n  editColumn?: string;\n  addColumn?: string;\n  deleteColumn?: string;\n  addRow?: string;\n  deleteRow?: string;\n  editNode?: string;\n  addNode?: string;\n  deleteNode?: string;\n  adjustNodeSize?: string;\n  moveNode?: string;\n  newNode?: string;\n  enterNodeName?: string;\n  enterColumnName?: string;\n  confirm?: string;\n  cancel?: string;\n  hint_drawLine?: string;\n  hint_hoverLine?: string;\n  hint_hoverAnchor?: string;\n  hint_moveNode?: string;\n  hint_resizeNode?: string;\n};\n\n// table-flow-graph options\nexport interface TFGraphOptions {\n  nodes?: TFGraphNode[];\n  columns?: TFGraphColumn[];\n  totalColumns?: number;\n  maxColumns?: number;\n  tableLayoutFixed?: boolean;\n  // rows?: TFGraphRow[];\n  totalRows?: number;\n  maxRows?: number;\n  isEditor?: boolean;\n  lines?: string[][]; // 2D array of anchor point ids to draw lines\n  labels?: Labels;\n  onChangeLines?: (lines: string[][]) => void; // lines changed\n  // column methods\n  addColumn?: () => void; // custom add column method\n  onAddColumn?: (columnData?: TFGraphColumn) => void; // add column event\n  editColumn?: (column: TFGraphColumn) => void;\n  onEditColumn?: (column: TFGraphColumn) => void; // on edit column callback\n  deleteColumn?: (column?: TFGraphColumn) => void; // custom delete column method\n  onDeleteColumn?: (column?: TFGraphColumn) => void; // delete column callback\n  // row methods\n  addRow?: () => void; // custom add row method\n  onAddRow?: () => void; // add row\n  deleteRow?: () => void; // custom delete row method\n  onDeleteRow?: () => void; // delete the last row\n  // node methods\n  addNode?: (row: number, column: number) => void; // custom add node method\n  onAddNode?: (node: TFGraphNode) => void; // add node callback\n  editNode?: (node: TFGraphNode) => void; // custom edit node method\n  onEditNode?: (node: TFGraphNode) => void; // edit node callback\n  deleteNode?: (node: TFGraphNode) => void; // custom delete node method\n  onDeleteNode?: (node: TFGraphNode) => void;\n  onClickNode?: (node: TFGraphNode, nodeEl: HTMLElement) => void; // click event on viewer mode\n  // onChangeNode?: (newNode: TFGraphNode, oldNode: TFGraphNode) => void;\n  renderNode?: (node: TFGraphNode) => HTMLElement; // custom render node content\n  renderNodeHoverPopup?: (node: TFGraphNode) => HTMLElement; // custom render node hover popup\n}\n\n// anchor point's relative position to a table cell\nexport type Bearing =\n  | 'topleft'\n  | 'top'\n  | 'topright'\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'bottomleft'\n  | 'bottom'\n  | 'bottomright';\n\nexport type Position = {\n  x: number;\n  y: number;\n};\n\nexport interface ColumnSpec {\n  left: number;\n  width: number;\n  columnIndex: number;\n}\n\nexport interface RowSpec {\n  top: number;\n  height: number;\n  rowIndex: number;\n}\n\nexport type TableGridRect = ColumnSpec & RowSpec;\n\nexport interface LineOptions {\n  positionA: Position; // x and y position relative to table element\n  positionB: Position;\n  thickness: number;\n  isStart: boolean;\n  isEnd: boolean;\n}\n\nexport interface LineGroupOptions {\n  anchorIds: string[];\n  isDrawingActive: boolean; // current line group is drawing\n}\n\nexport type BtnType = 'default' | 'primary' | 'warning' | 'danger' | 'success' | 'clean';\n\nexport interface BtnOptions {\n  label?: string;\n  type?: BtnType;\n  className?: string;\n  icon?: string;\n  onClick?: (e: MouseEvent) => void;\n  tooltip?: string;\n}\n\nexport type TogglerItem = {\n  label: string;\n  id?: string;\n};\n\nexport interface TogglerOptions {\n  items: TogglerItem[];\n  initialActiveIndex?: number;\n  onChange?: (item: TogglerItem, index: number) => void;\n}\n\nexport type TogglerButton = {\n  itemData: TogglerItem;\n  el: HTMLElement;\n  index: number;\n};\n\nexport interface PopupOptions {\n  placement?: 'top' | 'right' | 'bottom' | 'left';\n  contentElement?: HTMLElement;\n}\n\nexport interface TooltipOptoins {\n  placement?: 'top' | 'right' | 'bottom' | 'left';\n  label?: string;\n}\n\nexport interface DialogOptions {\n  title: string;\n  targetElement?: HTMLElement;\n  contentElement: HTMLElement;\n}\n\nexport interface HeaderCellMenuOptions {\n  showAdd?: boolean;\n  showDelete?: boolean;\n}\n\nexport type PositionAndSize = {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\nexport type CellPositionAndSize = {\n  row: number;\n  column: number;\n  rowSpan: number;\n  colSpan: number;\n};\n\nexport type HintType =\n  | 'idel'\n  | 'drawLine'\n  | 'hoverLine'\n  | 'hoverAnchor'\n  | 'moveNode'\n  | 'resizeNode';\n"],"names":["createClassElement","tagName","className","parentNode","el","document","createElement","appendChild","removeElement","element","remove","removeChild","setStyles","obj","key","val","concat","style","svgIconList","edit","plus","x","x2","expand","move","delete_row","delete_col","Icon","parentElement","options","htmlString","div","name","this","innerHTML","trim","firstChild","size","color","styleObj","width","height","fill","setAttribute","classList","add","Tooltip","targetElement","_this","rendered","addEventListener","mouseEnter","mouseLeave","prototype","render","_a","_b","placement","label","targetRect","getBoundingClientRect","body","left","top","areaElement","boxElement","arrowElement","areaRect","arrowRect","areaStyleObj","arrowStyleObj","bottom","right","updatePosition","showTimeoutId","window","clearTimeout","dismiss","removeEventListener","setTimeout","dismissTimeoutId","Button","type","onClick","icon","tooltip","btnToolTip","e","disabled","setDisabled","setEnabled","Toggler","btnList","items","initialActiveIndex","onChange","indicatorEl","btnContainerEl","forEach","item","index","push","itemData","setActive","activeIndex","setActiveIndicator","containerRect","rect","Dialog","title","getElementsByTagName","maskElement","renderTitleBar","contentElement","close","titleBarElement","innerText","closeBtnElement","EditColumnDialog","graphInstance","targetHeaderCell","dialog","setIsEdit","renderContent","columnData","isEdit","inputEl","value","labels","enterColumnName","btnContainer","btnCancel","cancel","btnConfirm","confirm","refresh","onEditColumn","colData","id","totalColumns","columns","onAddColumn","show","editColumn","addColumn","HintManager","targetEl","currentHintState","setHint","hintState","hint_drawLine","hint_hoverLine","hint_hoverAnchor","hint_moveNode","hint_resizeNode","Toolbar","modeToggler","editMode","previewMode","changeMode","setToolbarState","hintEl","hintMgr","rightBtns","newColumnBtn","disabledMask","addColDialog","hasTableHeader","Object","assign","disable","enable","maxColumns","mode","Popup","timeoutId","EditNodeDialog","targetCell","nodeData","nodeNameInput","enterNodeName","onEditNode","row","column","rowSpan","colSpan","nodes","onAddNode","editNode","addNode","TableCell","data","createTabelCell","node","isBtn","renderNode","hasNode","nodeEl","minHeight","setEditControls","controlLayer","editDialog","moveNode","tableController","startMoving","deleteNode","onDeleteNode","adjustNodeSize","startResizing","totalRows","deleteRowBtn","deleteRow","onDeleteRow","deleteColBtn","deleteColumn","targetColumn","onDeleteColumn","pop","onMouseEnter","onMouseLeave","setViewModeControls","onClickNode","showPopup","contentEl","renderNodeHoverPopup","popup","canDeleteRow","lineController","canDeleteColumn","setIsTarget","isTarget","opacity","TableHeaderCell","columnIndex","isLast","editColDialog","TableMaskBox","parentEl","submitCellChange","setPositinAndSize","pos_size","TableMask","tableGridRectList","showMask","targetTableCell","setFilteredOccupiedList","maskBox","mouseGridRect","getMouseRect","targetCellRect","getRectByRowAndColumn","setMaskBoxStatus","filteredOccupiedList","cloneDeep","occupiedList","i","j","isMovingCell","resultCellPositionAndSize","rowIndex","Math","min","abs","topLeftRect","bottomRightRect","doable","startMask","stopMask","submitChange","targetCellPositionAndSize","isEqual","targetGridRect","mouseX","mousePosition","mouseY","y","gridRect","find","onMouseMove","newRect","Table","initTableStatus","headerCells","cells","isResizingCell","renderTable","createHeader","createTds","createCells","setControls","deleteableObj","setColumnAndRowDeletable","cell","columnSpecs","rowSpecs","headerCell","offsetLeft","getMinRowSpanCell","targetCellRowHeight","offsetTop","rowSpec","columnSpec","tableMask","setBottomControl","minRowSpan","targetRowCell","rowCells","filter","length","rowSpan_1","toolbar","stopMoving","stopResizing","bottomControlEL","maxRows","addRow","onAddRow","tableLayoutFixed","tableLayout","tr_1","tr","occupiedRow","spanedTdIds","getElementById","includes","this_1","targetNode","targetTd","toString","LineSegment","parent","positionA","positionB","thickness","isStart","_c","isEnd","toggleStartPoint","toggleEndArrow","drawLine","setHovered","onDoubleClick","setHoverd","hovered","x1","y1","y2","sqrt","cx","cy","angle","atan2","PI","borderRadius","transform","startPointEl","endArrowEl","LineGroup","isDrawingActive","anchorIds","drawLines","addLineSegment","anchorId","endDrawLine","removeLineGroup","anchors","lines","targetAnchor","anchorController","anchor","pointList","map","posX","posY","line","cursorLineStartPosition","cursorLine","endDrawing","escapeDrawing","lineAnchorIds","lineArray","targetPosition","hoveredAnchor","LineController","Array","isArray","originLineAnchorIds","renderLines","lineGroup","setColAndRowDeletable","startDrawLine","isDrawingLine","zIndex","currentDrawingLine","undefined","onChangeLines","idArray","split","col","parseInt","createLineGroup","Anchor","bearing","isOffsetX","isOffsetY","hidden","elementTr","elementCol","area","shortBearing","getBearingShort","setVisible","setPosition","setHoveredAnchor","setOnePosition","visible","x_left","x_center","offsetWidth","x_right","y_top","y_center","offsetHeight","y_bottom","AnchorController","renderAnchors","createAnchors","resetPosition","setAnchorsVisible","defaultOptions","newNode","TableFlowGraph","func","wait","timeoutID","handleResize","debouncedHandleResize","Number","isInteger","console","warn","args","_i","arguments","context","apply","onKeydown","code","Error","baseElement","getAttribute","random","toFixed","init","isAlive","isEditor","TableController","handleEvent","event","onMourseMove","offsetX","clientX","offsetY","clientY","destroy"],"mappings":"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"}