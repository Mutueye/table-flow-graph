{"version":3,"file":"index.min.js","sources":["../src/lib/dom.ts","../src/lib/utils.ts","../src/components/ui/icon/svgIconList.ts","../src/components/ui/icon/Icon.ts","../src/components/ui/tooltip/Tooltip.ts","../src/components/ui/button/Button.ts","../src/components/ui/toggler/Toggler.ts","../src/components/toolbar/Toolbar.ts","../src/components/table/TableCell.ts","../src/components/table/TableHeaderCell.ts","../src/components/table/TableMaskBox.ts","../src/components/table/TableMask.ts","../src/components/table/TableController.ts","../src/components/line/LineSegment.ts","../src/components/line/LineGroup.ts","../src/components/line/LineController.ts","../src/components/anchor/Anchor.ts","../src/components/anchor/AnchorController.ts","../src/index.ts"],"sourcesContent":["// HTMLElementTagNameMap from lib.dom.d.ts\ninterface HTMLElementTagNameMap {\n  a: HTMLAnchorElement;\n  abbr: HTMLElement;\n  address: HTMLElement;\n  area: HTMLAreaElement;\n  article: HTMLElement;\n  aside: HTMLElement;\n  audio: HTMLAudioElement;\n  b: HTMLElement;\n  base: HTMLBaseElement;\n  bdi: HTMLElement;\n  bdo: HTMLElement;\n  blockquote: HTMLQuoteElement;\n  body: HTMLBodyElement;\n  br: HTMLBRElement;\n  button: HTMLButtonElement;\n  canvas: HTMLCanvasElement;\n  caption: HTMLTableCaptionElement;\n  cite: HTMLElement;\n  code: HTMLElement;\n  col: HTMLTableColElement;\n  colgroup: HTMLTableColElement;\n  data: HTMLDataElement;\n  datalist: HTMLDataListElement;\n  dd: HTMLElement;\n  del: HTMLModElement;\n  details: HTMLDetailsElement;\n  dfn: HTMLElement;\n  dialog: HTMLDialogElement;\n  dir: HTMLDirectoryElement;\n  div: HTMLDivElement;\n  dl: HTMLDListElement;\n  dt: HTMLElement;\n  em: HTMLElement;\n  embed: HTMLEmbedElement;\n  fieldset: HTMLFieldSetElement;\n  figcaption: HTMLElement;\n  figure: HTMLElement;\n  font: HTMLFontElement;\n  footer: HTMLElement;\n  form: HTMLFormElement;\n  frame: HTMLFrameElement;\n  frameset: HTMLFrameSetElement;\n  h1: HTMLHeadingElement;\n  h2: HTMLHeadingElement;\n  h3: HTMLHeadingElement;\n  h4: HTMLHeadingElement;\n  h5: HTMLHeadingElement;\n  h6: HTMLHeadingElement;\n  head: HTMLHeadElement;\n  header: HTMLElement;\n  hgroup: HTMLElement;\n  hr: HTMLHRElement;\n  html: HTMLHtmlElement;\n  i: HTMLElement;\n  iframe: HTMLIFrameElement;\n  img: HTMLImageElement;\n  input: HTMLInputElement;\n  ins: HTMLModElement;\n  kbd: HTMLElement;\n  label: HTMLLabelElement;\n  legend: HTMLLegendElement;\n  li: HTMLLIElement;\n  link: HTMLLinkElement;\n  main: HTMLElement;\n  map: HTMLMapElement;\n  mark: HTMLElement;\n  marquee: HTMLMarqueeElement;\n  menu: HTMLMenuElement;\n  meta: HTMLMetaElement;\n  meter: HTMLMeterElement;\n  nav: HTMLElement;\n  noscript: HTMLElement;\n  object: HTMLObjectElement;\n  ol: HTMLOListElement;\n  optgroup: HTMLOptGroupElement;\n  option: HTMLOptionElement;\n  output: HTMLOutputElement;\n  p: HTMLParagraphElement;\n  param: HTMLParamElement;\n  picture: HTMLPictureElement;\n  pre: HTMLPreElement;\n  progress: HTMLProgressElement;\n  q: HTMLQuoteElement;\n  rp: HTMLElement;\n  rt: HTMLElement;\n  ruby: HTMLElement;\n  s: HTMLElement;\n  samp: HTMLElement;\n  script: HTMLScriptElement;\n  section: HTMLElement;\n  select: HTMLSelectElement;\n  slot: HTMLSlotElement;\n  small: HTMLElement;\n  source: HTMLSourceElement;\n  span: HTMLSpanElement;\n  strong: HTMLElement;\n  style: HTMLStyleElement;\n  sub: HTMLElement;\n  summary: HTMLElement;\n  sup: HTMLElement;\n  table: HTMLTableElement;\n  tbody: HTMLTableSectionElement;\n  td: HTMLTableCellElement;\n  template: HTMLTemplateElement;\n  textarea: HTMLTextAreaElement;\n  tfoot: HTMLTableSectionElement;\n  th: HTMLTableCellElement;\n  thead: HTMLTableSectionElement;\n  time: HTMLTimeElement;\n  title: HTMLTitleElement;\n  tr: HTMLTableRowElement;\n  track: HTMLTrackElement;\n  u: HTMLElement;\n  ul: HTMLUListElement;\n  var: HTMLElement;\n  video: HTMLVideoElement;\n  wbr: HTMLElement;\n}\n\n/**\n * Create an element with designated tagName，and add a className to it,\n * then append to parentNode if has one.\n * @param tagName\n * @param className\n * @param parentNode\n * @returns\n */\nexport function createClassElement<K extends keyof HTMLElementTagNameMap>(\n  tagName: K,\n  className: string,\n  parentNode: HTMLElement = null,\n): HTMLElementTagNameMap[K] {\n  const el = document.createElement(tagName);\n  el.className = className;\n  if (parentNode) parentNode.appendChild(el);\n  return el;\n}\n\nconst elMatches =\n  typeof Element !== 'undefined' &&\n  (Element.prototype.matches || Element.prototype.webkitMatchesSelector);\n\nexport function matches(element: HTMLElement, query: string): boolean {\n  if (!elMatches) {\n    throw new Error('No element matching method supported');\n  }\n\n  return elMatches.call(element, query);\n}\n\n/**\n * Delete a dom element\n * @param {HTMLElement} element\n */\nexport function removeElement(element: HTMLElement) {\n  if (element) {\n    if (element.remove) {\n      element.remove();\n    } else {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    }\n  }\n}\n\nexport function queryChildren(element: HTMLElement, selector: string): HTMLElement[] {\n  return Array.prototype.filter.call(element.children, (child: HTMLElement) =>\n    matches(child, selector),\n  );\n}\n\nexport function getStyles(element: HTMLElement): CSSStyleDeclaration {\n  return getComputedStyle(element);\n}\n\nexport function setStyles(element: HTMLElement, obj: Partial<CSSStyleDeclaration>) {\n  for (const key in obj) {\n    let val = obj[key];\n    if (typeof val === 'number') {\n      val = `${val}px`;\n    }\n    element.style[key] = val;\n  }\n  return element;\n}\n\nexport const createElementFromHtmlString = (htmlString: string) => {\n  const div = document.createElement('div');\n  div.innerHTML = htmlString.trim();\n\n  // Change this to div.childNodes to support multiple top-level nodes.\n  return div.firstChild as HTMLElement;\n};\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport function debounce<F extends Function>(func: F, wait: number): F {\n  let timeoutID: number;\n\n  if (!Number.isInteger(wait)) {\n    console.warn('Call debounce without a valid number');\n    wait = 300;\n  }\n\n  // conversion through any necessary as it wont satisfy criteria otherwise\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return <any>function (this: any, ...args: any[]) {\n    clearTimeout(timeoutID);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    timeoutID = window.setTimeout(function () {\n      func.apply(context, args);\n    }, wait);\n  };\n}\n\n// check if last column/row deleteable by occupiedList\nexport const setColumnAndRowDeletable = (\n  occupiedList: number[][],\n  totalRows: number,\n  totalColumns: number,\n) => {\n  let canDeleteColumn = true;\n  let canDeleteRow = true;\n  for (let i = 0; i < totalRows - 1; i++) {\n    if (occupiedList[i][totalColumns - 1] !== 0) {\n      canDeleteColumn = false;\n    }\n  }\n  for (let i = 0; i < totalColumns - 1; i++) {\n    if (occupiedList[totalRows - 1][i] !== 0) {\n      canDeleteRow = false;\n    }\n  }\n  return { canDeleteRow, canDeleteColumn };\n};\n\nexport const uniqId = () => {\n  const eles = window.document.getElementsByTagName('body');\n  const bodyObj = eles.item(0);\n  const c = bodyObj.innerHTML.length;\n  const t = new Date().getTime();\n  const n = Math.floor(Math.random() * 100 + 1);\n  return c.toString() + t.toString() + n.toString();\n};\n","const svgIconList = {\n  edit: '<svg t=\"1657530672054\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"8212\" width=\"200\" height=\"200\"><path d=\"M712.96 268.373333l-128-128c-16.64-16.64-43.52-16.64-60.16 0l-384 384c-8.106667 8.106667-12.373333 18.773333-12.373333 30.293334v128c0 23.466667 19.2 42.666667 42.666666 42.666666h128c11.093333 0 22.186667-4.266667 30.293334-12.373333l264.106666-264.106667 22.186667-22.186666 97.706667-97.706667c16.213333-16.64 16.213333-43.946667-0.426667-60.586667zM281.173333 640H213.333333v-67.84l232.533334-232.533333 67.84 67.84L281.173333 640z m292.693334-292.693333l-67.84-67.84L554.666667 230.826667 622.506667 298.666667l-48.64 48.64zM853.333333 896H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667z\" p-id=\"8213\"></path></svg>',\n  plus: '<svg t=\"1657533725416\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4984\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"4985\"></path><path d=\"M725.333333 512c0 23.466667-19.2 42.666667-42.666666 42.666667h-128v128c0 23.466667-19.2 42.666667-42.666667 42.666666s-42.666667-19.2-42.666667-42.666666v-128H341.333333c-23.466667 0-42.666667-19.2-42.666666-42.666667s19.2-42.666667 42.666666-42.666667h128V341.333333c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666667 42.666666v128h128c23.466667 0 42.666667 19.2 42.666666 42.666667z\" p-id=\"4986\"></path></svg>',\n  x: '<svg t=\"1657533744067\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"5120\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"5121\"></path><path d=\"M663.04 602.453333c16.64 16.64 16.64 43.52 0 60.16-8.533333 8.533333-19.2 12.373333-30.293333 12.373334-11.093333 0-21.76-4.266667-30.293334-12.373334L512 572.16l-90.453333 90.453333c-8.533333 8.533333-19.2 12.373333-30.293334 12.373334-11.093333 0-21.76-4.266667-30.293333-12.373334-16.64-16.64-16.64-43.52 0-60.16l90.453333-90.453333-90.453333-90.453333c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-89.6 90.453333 90.453333 90.453333z\" p-id=\"5122\"></path></svg>',\n  expand:\n    '<svg t=\"1658744557448\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9385\" width=\"200\" height=\"200\"><path d=\"M170.666667 394.24c-23.466667 0-42.666667-19.2-42.666667-42.666667V170.666667c0-23.466667 19.2-42.666667 42.666667-42.666667h180.906666c23.466667 0 42.666667 19.2 42.666667 42.666667s-19.2 42.666667-42.666667 42.666666H213.333333v138.24c0 23.466667-19.2 42.666667-42.666666 42.666667zM672.426667 896c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666H810.666667v-138.24c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667V853.333333c0 23.466667-19.2 42.666667-42.666667 42.666667h-180.906666zM170.666667 896c-11.52 0-22.186667-4.693333-30.293334-12.373333-8.106667-8.106667-12.373333-18.773333-12.373333-30.293334v-180.906666c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667V810.666667h138.24c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667H170.666667zM853.333333 394.24c-23.466667 0-42.666667-19.2-42.666666-42.666667V213.333333h-138.24c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667H853.333333c11.52 0 22.186667 4.693333 30.293334 12.373333 8.106667 8.106667 12.373333 18.773333 12.373333 30.293334v180.906666c0 23.466667-19.2 42.666667-42.666667 42.666667z\" p-id=\"9386\"></path></svg>',\n  move: '<svg t=\"1658744606420\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9520\" width=\"200\" height=\"200\"><path d=\"M426.666667 512c0 23.466667-19.2 42.666667-42.666667 42.666667H230.826667L285.866667 609.706667c16.64 16.64 16.64 43.52 0 60.16-8.106667 8.533333-19.2 12.373333-30.293334 12.373333s-21.76-4.266667-30.293333-12.373333l-128-128c-16.64-16.64-16.64-43.52 0-60.16l128-128c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-54.613333 55.466666H384c23.466667 0 42.666667 19.2 42.666667 42.666667zM926.293333 542.293333l-128 128c-8.106667 8.533333-19.2 12.373333-30.293333 12.373334s-21.76-4.266667-30.293333-12.373334c-16.64-16.64-16.64-43.52 0-60.16l55.04-55.04H640c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667h153.173333L738.133333 414.72c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l128 128c16.64 15.786667 16.64 43.093333 0 59.733333zM670.293333 798.293333l-128 128c-8.106667 8.106667-18.773333 12.373333-30.293333 12.373334s-22.186667-4.693333-30.293333-12.373334l-128-128c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l55.04 55.04V640c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667v153.173333l55.04-55.04c16.64-16.64 43.52-16.64 60.16 0 17.493333 16.213333 17.493333 43.52 0.853333 60.16zM670.293333 286.293333c-16.64 16.64-43.52 16.64-60.16 0l-55.466666-55.466666V384c0 23.466667-19.2 42.666667-42.666667 42.666667s-42.666667-19.2-42.666667-42.666667V230.826667l-55.04 55.466666C405.76 294.4 395.093333 298.666667 384 298.666667s-21.76-4.266667-30.293333-12.373334C337.066667 269.653333 337.066667 242.773333 353.706667 226.133333l128-128c16.64-16.64 43.52-16.64 60.16 0l128 128c17.066667 16.213333 17.066667 43.52 0.426666 60.16z\" p-id=\"9521\"></path></svg>',\n  remove:\n    '<svg t=\"1658744626586\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9655\" width=\"200\" height=\"200\"><path d=\"M405.333333 768c-23.466667 0-42.666667-19.2-42.666666-42.666667v-256c0-23.466667 19.2-42.666667 42.666666-42.666666s42.666667 19.2 42.666667 42.666666v256c0 23.466667-19.2 42.666667-42.666667 42.666667zM618.666667 768c-23.466667 0-42.666667-19.2-42.666667-42.666667v-256c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666666 42.666666v256c0 23.466667-19.2 42.666667-42.666666 42.666667z\" p-id=\"9656\"></path><path d=\"M896 256h-170.666667V128c0-23.466667-19.2-42.666667-42.666666-42.666667H341.333333c-23.466667 0-42.666667 19.2-42.666666 42.666667v128H128c-23.466667 0-42.666667 19.2-42.666667 42.666667s19.2 42.666667 42.666667 42.666666h42.666667v554.666667c0 23.466667 19.2 42.666667 42.666666 42.666667h597.333334c23.466667 0 42.666667-19.2 42.666666-42.666667V341.333333h42.666667c23.466667 0 42.666667-19.2 42.666667-42.666666s-19.2-42.666667-42.666667-42.666667zM384 170.666667h256v85.333333H384V170.666667z m384 682.666666H256V341.333333h512v512z\" p-id=\"9657\"></path></svg>',\n  delete_row:\n    '<svg t=\"1659516333894\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"12036\" width=\"200\" height=\"200\"><path d=\"M663.04 602.453333c16.64 16.64 16.64 43.52 0 60.16-8.533333 8.106667-19.2 12.373333-30.293333 12.373334-11.093333 0-21.76-4.266667-30.293334-12.373334L512 572.586667l-90.453333 90.453333c-8.106667 8.106667-19.2 12.373333-30.293334 12.373333-11.093333 0-21.76-4.266667-30.293333-12.373333-16.64-16.64-16.64-43.52 0-60.16l90.453333-90.453333-90.453333-90.88c-16.64-16.64-16.64-43.52 0-60.586667 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.586667L572.16 512l90.88 90.453333zM896 170.666667c0 23.466667-19.2 42.666667-42.666667 42.666666H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666667zM853.333333 896H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667z\" p-id=\"12037\"></path></svg>',\n  delete_col:\n    '<svg t=\"1659516365239\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"12171\" width=\"200\" height=\"200\"><path d=\"M421.546667 663.04c-16.64 16.64-43.52 16.64-60.16 0-8.106667-8.533333-12.373333-19.2-12.373334-30.293333 0-11.093333 4.266667-21.76 12.373334-30.293334l90.453333-90.453333-90.88-90.453333c-8.106667-8.106667-12.373333-19.2-12.373333-30.293334 0-11.093333 4.266667-21.76 12.373333-30.293333 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.586666 0 16.64 16.64 16.64 43.52 0 60.16L572.16 512l90.453333 90.453333c16.64 16.64 16.64 43.52 0 60.16-16.64 16.64-43.52 16.64-60.586666 0L512 572.16l-90.453333 90.88zM853.333333 896c-23.466667 0-42.666667-19.2-42.666666-42.666667V170.666667c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667v682.666666c0 23.466667-19.2 42.666667-42.666667 42.666667zM128 853.333333V170.666667c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667v682.666666c0 23.466667-19.2 42.666667-42.666666 42.666667s-42.666667-19.2-42.666667-42.666667z\" p-id=\"12172\"></path></svg>',\n};\n\nexport default svgIconList;\n","import { createElementFromHtmlString, setStyles } from '../../../lib/dom';\nimport svgIconList from './svgIconList';\n\n// const svgIconList = {\n//   edit: '<svg t=\"1657530672054\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"8212\" width=\"200\" height=\"200\"><path d=\"M712.96 268.373333l-128-128c-16.64-16.64-43.52-16.64-60.16 0l-384 384c-8.106667 8.106667-12.373333 18.773333-12.373333 30.293334v128c0 23.466667 19.2 42.666667 42.666666 42.666666h128c11.093333 0 22.186667-4.266667 30.293334-12.373333l264.106666-264.106667 22.186667-22.186666 97.706667-97.706667c16.213333-16.64 16.213333-43.946667-0.426667-60.586667zM281.173333 640H213.333333v-67.84l232.533334-232.533333 67.84 67.84L281.173333 640z m292.693334-292.693333l-67.84-67.84L554.666667 230.826667 622.506667 298.666667l-48.64 48.64zM853.333333 896H170.666667c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666h682.666666c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667z\" p-id=\"8213\"></path></svg>',\n//   plus: '<svg t=\"1657533725416\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4984\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"4985\"></path><path d=\"M725.333333 512c0 23.466667-19.2 42.666667-42.666666 42.666667h-128v128c0 23.466667-19.2 42.666667-42.666667 42.666666s-42.666667-19.2-42.666667-42.666666v-128H341.333333c-23.466667 0-42.666667-19.2-42.666666-42.666667s19.2-42.666667 42.666666-42.666667h128V341.333333c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666667 42.666666v128h128c23.466667 0 42.666667 19.2 42.666666 42.666667z\" p-id=\"4986\"></path></svg>',\n//   x: '<svg t=\"1657533744067\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"5120\" width=\"200\" height=\"200\"><path d=\"M512 85.333333C276.906667 85.333333 85.333333 276.906667 85.333333 512s191.573333 426.666667 426.666667 426.666667 426.666667-191.573333 426.666667-426.666667S747.093333 85.333333 512 85.333333z m0 768c-188.16 0-341.333333-153.173333-341.333333-341.333333s153.173333-341.333333 341.333333-341.333333 341.333333 153.173333 341.333333 341.333333-153.173333 341.333333-341.333333 341.333333z\" p-id=\"5121\"></path><path d=\"M663.04 602.453333c16.64 16.64 16.64 43.52 0 60.16-8.533333 8.533333-19.2 12.373333-30.293333 12.373334-11.093333 0-21.76-4.266667-30.293334-12.373334L512 572.16l-90.453333 90.453333c-8.533333 8.533333-19.2 12.373333-30.293334 12.373334-11.093333 0-21.76-4.266667-30.293333-12.373334-16.64-16.64-16.64-43.52 0-60.16l90.453333-90.453333-90.453333-90.453333c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l90.453333 90.453333 90.453334-90.453333c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-89.6 90.453333 90.453333 90.453333z\" p-id=\"5122\"></path></svg>',\n//   expand:\n//     '<svg t=\"1658744557448\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9385\" width=\"200\" height=\"200\"><path d=\"M170.666667 394.24c-23.466667 0-42.666667-19.2-42.666667-42.666667V170.666667c0-23.466667 19.2-42.666667 42.666667-42.666667h180.906666c23.466667 0 42.666667 19.2 42.666667 42.666667s-19.2 42.666667-42.666667 42.666666H213.333333v138.24c0 23.466667-19.2 42.666667-42.666666 42.666667zM672.426667 896c-23.466667 0-42.666667-19.2-42.666667-42.666667s19.2-42.666667 42.666667-42.666666H810.666667v-138.24c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667V853.333333c0 23.466667-19.2 42.666667-42.666667 42.666667h-180.906666zM170.666667 896c-11.52 0-22.186667-4.693333-30.293334-12.373333-8.106667-8.106667-12.373333-18.773333-12.373333-30.293334v-180.906666c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667V810.666667h138.24c23.466667 0 42.666667 19.2 42.666667 42.666666s-19.2 42.666667-42.666667 42.666667H170.666667zM853.333333 394.24c-23.466667 0-42.666667-19.2-42.666666-42.666667V213.333333h-138.24c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667H853.333333c11.52 0 22.186667 4.693333 30.293334 12.373333 8.106667 8.106667 12.373333 18.773333 12.373333 30.293334v180.906666c0 23.466667-19.2 42.666667-42.666667 42.666667z\" p-id=\"9386\"></path></svg>',\n//   move: '<svg t=\"1658744606420\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9520\" width=\"200\" height=\"200\"><path d=\"M426.666667 512c0 23.466667-19.2 42.666667-42.666667 42.666667H230.826667L285.866667 609.706667c16.64 16.64 16.64 43.52 0 60.16-8.106667 8.533333-19.2 12.373333-30.293334 12.373333s-21.76-4.266667-30.293333-12.373333l-128-128c-16.64-16.64-16.64-43.52 0-60.16l128-128c16.64-16.64 43.52-16.64 60.16 0 16.64 16.64 16.64 43.52 0 60.16l-54.613333 55.466666H384c23.466667 0 42.666667 19.2 42.666667 42.666667zM926.293333 542.293333l-128 128c-8.106667 8.533333-19.2 12.373333-30.293333 12.373334s-21.76-4.266667-30.293333-12.373334c-16.64-16.64-16.64-43.52 0-60.16l55.04-55.04H640c-23.466667 0-42.666667-19.2-42.666667-42.666666s19.2-42.666667 42.666667-42.666667h153.173333L738.133333 414.72c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l128 128c16.64 15.786667 16.64 43.093333 0 59.733333zM670.293333 798.293333l-128 128c-8.106667 8.106667-18.773333 12.373333-30.293333 12.373334s-22.186667-4.693333-30.293333-12.373334l-128-128c-16.64-16.64-16.64-43.52 0-60.16 16.64-16.64 43.52-16.64 60.16 0l55.04 55.04V640c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667v153.173333l55.04-55.04c16.64-16.64 43.52-16.64 60.16 0 17.493333 16.213333 17.493333 43.52 0.853333 60.16zM670.293333 286.293333c-16.64 16.64-43.52 16.64-60.16 0l-55.466666-55.466666V384c0 23.466667-19.2 42.666667-42.666667 42.666667s-42.666667-19.2-42.666667-42.666667V230.826667l-55.04 55.466666C405.76 294.4 395.093333 298.666667 384 298.666667s-21.76-4.266667-30.293333-12.373334C337.066667 269.653333 337.066667 242.773333 353.706667 226.133333l128-128c16.64-16.64 43.52-16.64 60.16 0l128 128c17.066667 16.213333 17.066667 43.52 0.426666 60.16z\" p-id=\"9521\"></path></svg>',\n//   remove:\n//     '<svg t=\"1658744626586\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9655\" width=\"200\" height=\"200\"><path d=\"M405.333333 768c-23.466667 0-42.666667-19.2-42.666666-42.666667v-256c0-23.466667 19.2-42.666667 42.666666-42.666666s42.666667 19.2 42.666667 42.666666v256c0 23.466667-19.2 42.666667-42.666667 42.666667zM618.666667 768c-23.466667 0-42.666667-19.2-42.666667-42.666667v-256c0-23.466667 19.2-42.666667 42.666667-42.666666s42.666667 19.2 42.666666 42.666666v256c0 23.466667-19.2 42.666667-42.666666 42.666667z\" p-id=\"9656\"></path><path d=\"M896 256h-170.666667V128c0-23.466667-19.2-42.666667-42.666666-42.666667H341.333333c-23.466667 0-42.666667 19.2-42.666666 42.666667v128H128c-23.466667 0-42.666667 19.2-42.666667 42.666667s19.2 42.666667 42.666667 42.666666h42.666667v554.666667c0 23.466667 19.2 42.666667 42.666666 42.666667h597.333334c23.466667 0 42.666667-19.2 42.666666-42.666667V341.333333h42.666667c23.466667 0 42.666667-19.2 42.666667-42.666666s-19.2-42.666667-42.666667-42.666667zM384 170.666667h256v85.333333H384V170.666667z m384 682.666666H256V341.333333h512v512z\" p-id=\"9657\"></path></svg>',\n// };\n\nexport class Icon {\n  public element: HTMLElement;\n  constructor(\n    parentElement: HTMLElement | null,\n    options: {\n      name: string;\n      size?: number;\n      color?: string;\n      className?: string;\n      style?: Partial<CSSStyleDeclaration>;\n    },\n  ) {\n    const targetIcon = svgIconList[options.name];\n    if (targetIcon) {\n      this.element = createElementFromHtmlString(svgIconList[options.name]);\n      const size = options.size ? options.size : 16;\n      const color = options.color ? options.color : '#333333';\n      const styleObj: Partial<CSSStyleDeclaration> = {\n        width: size + 'px',\n        height: size + 'px',\n      };\n      if (options.color) {\n        styleObj.fill = color;\n        styleObj.color = color;\n      }\n      setStyles(this.element, styleObj);\n      if (options.style) {\n        setStyles(this.element, options.style);\n      }\n      if (options.className) this.element.setAttribute('class', options.className);\n      this.element.classList.add('tfgraph-icon');\n      parentElement.appendChild(this.element);\n    }\n  }\n}\n","import { createClassElement, removeElement, setStyles } from '../../../lib/dom';\nimport { TooltipOptoins } from '../../../types';\n\n/**\n * table-flow-graph popup\n */\nexport default class Tooltip {\n  targetElement: HTMLElement;\n  options: TooltipOptoins;\n  public element: HTMLElement;\n  public areaElement: HTMLElement;\n  public boxElement: HTMLElement;\n  public arrowElement: HTMLElement;\n  public disabled: boolean;\n  public rendered: boolean;\n  public dismissTimeoutId: number | null;\n  public showTimeoutId: number | null;\n\n  constructor(targetElement: HTMLElement, options: TooltipOptoins) {\n    this.targetElement = targetElement;\n    this.options = options;\n    this.rendered = false;\n    this.targetElement.addEventListener('mouseenter', () => this.mouseEnter());\n    this.targetElement.addEventListener('mouseleave', () => this.mouseLeave());\n  }\n\n  public render() {\n    const { placement = 'top', label } = this.options;\n\n    const targetRect = this.targetElement.getBoundingClientRect();\n    this.element = createClassElement('div', 'tfgraph-tooltip', document.body);\n    setStyles(this.element, {\n      left: targetRect.left + 0.5 * targetRect.width + 'px',\n      top: targetRect.top + 0.5 * targetRect.height + 'px',\n    });\n\n    this.areaElement = createClassElement('div', `tfgraph-tooltip-area ${placement}`, this.element);\n    this.boxElement = createClassElement('div', 'tfgraph-tooltip-box', this.areaElement);\n    this.arrowElement = createClassElement('div', 'tfgraph-tooltip-arrow', this.areaElement);\n    if (label) this.boxElement.innerHTML = label;\n\n    const areaRect = this.areaElement.getBoundingClientRect();\n    const arrowRect = this.arrowElement.getBoundingClientRect();\n    const areaStyleObj: Partial<CSSStyleDeclaration> = {};\n    const arrowStyleObj: Partial<CSSStyleDeclaration> = {};\n    switch (placement) {\n      case 'top':\n        areaStyleObj.left = -0.5 * areaRect.width + 'px';\n        areaStyleObj.bottom = 0.5 * targetRect.height + 10 + 'px';\n        arrowStyleObj.left = 0.5 * (areaRect.width - arrowRect.width) + 'px';\n        break;\n      case 'right':\n        areaStyleObj.left = 0.5 * targetRect.width + 'px';\n        areaStyleObj.top = -0.5 * areaRect.height + 'px';\n        arrowStyleObj.top = 0.5 * (areaRect.height - arrowRect.height) + 'px';\n        break;\n      case 'bottom':\n        areaStyleObj.left = -0.5 * areaRect.width + 'px';\n        areaStyleObj.top = 0.5 * targetRect.height + 'px';\n        arrowStyleObj.left = 0.5 * (areaRect.width - arrowRect.width) + 'px';\n        break;\n      case 'left':\n        areaStyleObj.right = 0.5 * targetRect.width + 'px';\n        areaStyleObj.top = -0.5 * areaRect.height + 'px';\n        arrowStyleObj.top = 0.5 * (areaRect.height - arrowRect.height) + 'px';\n        break;\n      default:\n        break;\n    }\n    setStyles(this.areaElement, areaStyleObj);\n    setStyles(this.arrowElement, arrowStyleObj);\n\n    this.rendered = true;\n    if (this.showTimeoutId) {\n      window.clearTimeout(this.showTimeoutId);\n      this.showTimeoutId = null;\n    }\n  }\n\n  public dismiss() {\n    this.rendered = false;\n    this.targetElement.removeEventListener('mouseenter', () => this.mouseEnter());\n    this.targetElement.removeEventListener('mouseleave', () => this.mouseLeave());\n    if (this.element) removeElement(this.element);\n  }\n\n  public mouseEnter() {\n    if (!this.rendered && !this.showTimeoutId) {\n      this.showTimeoutId = window.setTimeout(() => {\n        this.render();\n      }, 500);\n    }\n    if (this.dismissTimeoutId) {\n      window.clearTimeout(this.dismissTimeoutId);\n    }\n  }\n\n  public mouseLeave() {\n    if (this.showTimeoutId) {\n      window.clearTimeout(this.showTimeoutId);\n      this.showTimeoutId = null;\n    }\n    this.dismissTimeoutId = window.setTimeout(() => {\n      this.dismiss();\n    }, 50);\n  }\n}\n","import { createClassElement } from '../../../lib/dom';\nimport { BtnOptions } from '../../../types';\nimport { Icon } from '../icon/Icon';\nimport Tooltip from '../tooltip/Tooltip';\n\n/**\n * table-flow-graph button\n */\nexport default class Button {\n  public element: HTMLElement;\n  public disabled: boolean;\n  public btnToolTip: Tooltip;\n\n  constructor(parentElement: HTMLElement, options: BtnOptions) {\n    const { label, type, onClick, icon, tooltip } = options;\n    let className = 'tfgraph-button is-hoverable';\n    if (options.className) className += ' ' + options.className;\n    className += ' ' + (type ? type : 'default');\n    this.element = createClassElement('button', className, parentElement);\n    if (icon) new Icon(this.element, { name: icon, size: 16, className: label ? 'mr-5' : '' });\n    if (label) {\n      createClassElement('span', '', this.element).innerHTML = label;\n    }\n    if (tooltip) this.btnToolTip = new Tooltip(this.element, { label: tooltip });\n\n    this.element.addEventListener('click', (e) => {\n      if (this.btnToolTip) this.btnToolTip.dismiss();\n      if (this.disabled) return;\n      if (typeof onClick === 'function') {\n        onClick(e);\n      }\n    });\n  }\n\n  setDisabled() {\n    this.disabled = true;\n    this.element.classList.add('disabled');\n  }\n\n  setEnabled() {\n    this.disabled = false;\n    this.element.classList.remove('disabled');\n  }\n}\n","import { createClassElement, setStyles } from '../../../lib/dom';\nimport { TogglerOptions, TogglerButton } from '../../../types';\n\n/**\n * table-flow-graph toggler btn group\n */\nexport default class Toggler {\n  public element: HTMLElement;\n  public indicatorEl: HTMLElement;\n  public btnContainerEl: HTMLElement;\n  public disabled: boolean;\n  public activeIndex: number;\n  public btnList: TogglerButton[] = [];\n\n  constructor(parentElement: HTMLElement, options: TogglerOptions) {\n    const { items, initialActiveIndex, onChange } = options;\n    this.element = createClassElement('div', 'tfgraph-toggler', parentElement);\n    this.indicatorEl = createClassElement('div', 'tfgraph-toggler-indicator', this.element);\n    this.btnContainerEl = createClassElement('div', 'flex flex-row items-center', this.element);\n    items.forEach((item, index) => {\n      const el = createClassElement('button', 'tfgraph-toggler-btn', this.btnContainerEl);\n      el.innerHTML = item.label;\n      this.btnList.push({ itemData: item, el, index });\n      el.addEventListener('click', () => {\n        this.setActive(index);\n        if (typeof onChange === 'function') onChange(item, index);\n      });\n    });\n    this.setActive(typeof initialActiveIndex === 'number' ? initialActiveIndex : 0);\n  }\n\n  setActive(index: number) {\n    if (this.activeIndex !== index) {\n      if (typeof this.activeIndex === 'number') {\n        this.btnList[this.activeIndex].el.classList.remove('active');\n      }\n      this.activeIndex = index;\n      this.btnList[index].el.classList.add('active');\n      this.setActiveIndicator();\n    }\n  }\n\n  setActiveIndicator() {\n    const containerRect = this.btnContainerEl.getBoundingClientRect();\n    const rect = this.btnList[this.activeIndex].el.getBoundingClientRect();\n    setStyles(this.indicatorEl, {\n      width: rect.width + 'px',\n      // this.activeIndex === 0 || this.activeIndex === this.btnList.length - 1\n      //   ? rect.width - 2 + 'px'\n      //   : rect.width + 4 + 'px',\n      left: rect.left - containerRect.left + 4 + 'px',\n      // this.activeIndex === 0\n      //   ? rect.left - containerRect.left + 4 + 'px'\n      //   : rect.left - containerRect.left - 2 + 'px',\n    });\n    // this.indicatorEl.style.width = rect.width + 2 + 'px';\n  }\n\n  setDisabled() {\n    this.disabled = true;\n    this.element.classList.add('disabled');\n  }\n\n  setEnabled() {\n    this.disabled = false;\n    this.element.classList.remove('disabled');\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport Button from '../ui/button/Button';\nimport Toggler from '../ui/toggler/Toggler';\nimport { Mode } from '../../types';\n// import { Icon } from './ui/Icon';\n\n/**\n * table-flow-graph toolbar\n */\nexport default class Toolbar {\n  public element: HTMLElement;\n  public graphInstance: TableFlowGraph;\n  public disabledMask: HTMLElement;\n  public modeToggler: Toggler;\n  public newColumnBtn: Button;\n\n  constructor(parentElement: HTMLElement, graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement('div', 'tfgraph-toolbar', parentElement);\n    this.modeToggler = new Toggler(this.element, {\n      items: [\n        { label: this.graphInstance.options.labels.editMode, id: 'edit' },\n        { label: this.graphInstance.options.labels.previewMode, id: 'preview' },\n      ],\n      onChange: (item) => {\n        graphInstance.changeMode(item.id as Mode);\n      },\n    });\n    // new Icon(this.element, {\n    //   name: 'plus',\n    //   style: { width: '16px', height: '16px' },\n    // });\n    const rightBtns = createClassElement('div', 'flex-row items-center', this.element);\n    this.newColumnBtn = new Button(rightBtns, {\n      icon: 'plus',\n      label: this.graphInstance.options.labels.addColumn,\n      type: 'primary',\n      onClick: () => this.addColumn(),\n    });\n\n    this.disabledMask = createClassElement('div', 'tfgraph-toolbar-mask hidden', this.element);\n    // new Button(rightBtns, { label: '添加行', type: 'primary' });\n\n    // new Button(this.element, { label: 'default' });\n    // new Button(this.element, {\n    //   label: 'clean',\n    //   type: 'clean',\n    //   onClick: () => {\n    //     console.log('clean clicked');\n    //   },\n    // });\n    // new Button(this.element, { label: 'primary', type: 'primary' });\n    // new Button(this.element, { label: 'warning', type: 'warning' });\n    // new Button(this.element, { label: 'danger', type: 'danger' });\n    // new Button(this.element, { label: 'success', type: 'success' });\n    // testBtn.setDisabled();\n    this.setToolbarState();\n  }\n\n  addColumn() {\n    if (typeof this.graphInstance.options.addColumn === 'function') {\n      this.graphInstance.options.addColumn();\n    } else {\n      if (this.graphInstance.hasTableHeader) {\n        console.log('do add column:::::::::::22');\n        // TODO add column dialog\n        // TOOD onAddColumn(columnData)\n      } else {\n        this.graphInstance.refresh(\n          Object.assign({}, this.graphInstance.options, {\n            columns: null,\n            totalColumns: this.graphInstance.options.totalColumns + 1,\n          }),\n        );\n        if (typeof this.graphInstance.options.onAddColumn === 'function') {\n          this.graphInstance.options.onAddColumn();\n        }\n      }\n    }\n  }\n\n  disable() {\n    this.disabledMask.classList.remove('hidden');\n  }\n\n  enable() {\n    this.disabledMask.classList.add('hidden');\n  }\n\n  setToolbarState() {\n    if (this.graphInstance.options.totalColumns >= this.graphInstance.options.maxColumns) {\n      this.newColumnBtn.element.classList.add('hidden');\n    } else {\n      this.newColumnBtn.element.classList.remove('hidden');\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport { TFGraphNode } from '../../types';\nimport Button from '../ui/button/Button';\n\n/**\n * table-flow-graph tabel cell\n */\nexport default class TableCell {\n  public graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public nodeEl: HTMLElement;\n  public controlLayer: HTMLElement;\n  public nodeData?: TFGraphNode;\n  public hasNode: boolean;\n  public row: number;\n  public column: number;\n  public rowSpan: number;\n  public colSpan: number;\n  public isTarget: boolean; // is moving or resizing this cell\n  public deleteRowBtn: Button;\n  public deleteColBtn: Button;\n\n  constructor(\n    parentElement: HTMLElement,\n    data: TFGraphNode | null,\n    row: number,\n    column: number,\n    graphInstance: TableFlowGraph,\n  ) {\n    this.graphInstance = graphInstance;\n    this.row = row;\n    this.column = column;\n    this.element = this.createTabelCell(data, row, column, this.graphInstance);\n    parentElement.appendChild(this.element);\n  }\n\n  createTabelCell(\n    data: TFGraphNode | null,\n    row,\n    column,\n    graphInstance: TableFlowGraph,\n  ): HTMLElement {\n    const el = createClassElement('div', 'tfgraph-cell');\n    el.setAttribute('id', `${graphInstance.id}_cell_${row}_${column}`);\n    if (data) {\n      const node = createClassElement('div', 'tfgraph-node');\n      if (data.type) node.classList.add(data.type);\n      if (data.isBtn && this.graphInstance.mode !== 'edit') node.classList.add('isBtn');\n      if (typeof this.graphInstance.options.renderNode === 'function') {\n        node.appendChild(this.graphInstance.options.renderNode(data));\n      } else {\n        node.innerText = data.title;\n      }\n\n      // node.innerText = data.id;\n      el.appendChild(node);\n      this.hasNode = true;\n      this.nodeEl = node;\n      this.nodeData = data;\n      this.rowSpan = data.rowSpan;\n      this.colSpan = data.colSpan;\n    } else {\n      this.rowSpan = 1;\n      this.colSpan = 1;\n      this.hasNode = false;\n    }\n    // set min height base on row span\n    el.style.minHeight = 80 * this.rowSpan + 'px';\n    return el;\n  }\n\n  // cell controls for edit mode\n  setEditControls() {\n    this.controlLayer = createClassElement(\n      'div',\n      'tfgraph-cell-control-layer hidden',\n      this.element,\n    );\n    // const controlRowEl = createClassElement(\n    //   'div',\n    //   'flex flex-row items-center justify-center p-15 flex-wrap',\n    //   this.controlLayer,\n    // );\n    if (this.nodeData) {\n      new Button(this.controlLayer, {\n        icon: 'move',\n        type: 'primary',\n        tooltip: this.graphInstance.options.labels.moveNode,\n        className: 'absolute left-6 top-6 p-0 sm w-28 btn-tl',\n        onClick: () => {\n          this.graphInstance.tableController.startMoving(this);\n        },\n      });\n      new Button(this.controlLayer, {\n        icon: 'edit',\n        type: 'primary',\n        tooltip: this.graphInstance.options.labels.editNode,\n        className: 'absolute left-6 bottom-6 p-0 sm w-28 btn-bl',\n        onClick: () => {\n          if (typeof this.graphInstance.options.onEditNode === 'function') {\n            this.graphInstance.options.onEditNode(this.nodeData);\n          }\n        },\n      });\n      new Button(this.controlLayer, {\n        icon: 'remove',\n        type: 'danger',\n        tooltip: this.graphInstance.options.labels.deleteNode,\n        className: 'absolute right-6 top-6 p-0 sm w-28 btn-tr',\n        onClick: () => {\n          if (typeof this.graphInstance.options.onDeleteNode === 'function') {\n            this.graphInstance.options.onDeleteNode(this.nodeData);\n          }\n        },\n      });\n      new Button(this.controlLayer, {\n        icon: 'expand',\n        type: 'primary',\n        tooltip: this.graphInstance.options.labels.adjustNodeSize,\n        className: 'absolute right-6 bottom-6 p-0 sm w-28 btn-br',\n        onClick: () => {\n          this.graphInstance.tableController.startResizing(this);\n        },\n      });\n    } else {\n      new Button(this.controlLayer, {\n        icon: 'plus',\n        type: 'primary',\n        className: 'absolute left-6 top-6 p-0 sm w-28 btn-tl',\n        tooltip: this.graphInstance.options.labels.addNode,\n        onClick: () => {\n          if (typeof this.graphInstance.options.onAddNode === 'function') {\n            this.graphInstance.options.onAddNode(this.row, this.column);\n          }\n        },\n      });\n      if (\n        this.graphInstance.options.totalRows > 1 &&\n        this.row === this.graphInstance.options.totalRows - 1\n      ) {\n        this.deleteRowBtn = new Button(this.controlLayer, {\n          icon: 'delete_row',\n          type: 'danger',\n          className: 'absolute right-6 top-6 p-0 sm w-28 btn-tr',\n          tooltip: this.graphInstance.options.labels.deleteRow,\n          onClick: () => {\n            if (typeof this.graphInstance.options.deleteRow === 'function') {\n              this.graphInstance.options.deleteRow();\n            } else {\n              this.graphInstance.refresh(\n                Object.assign({}, this.graphInstance.options, {\n                  totalRows: this.graphInstance.options.totalRows - 1,\n                }),\n              );\n              if (typeof this.graphInstance.options.onDeleteRow === 'function') {\n                this.graphInstance.options.onDeleteRow();\n              }\n            }\n          },\n        });\n      }\n      if (\n        this.graphInstance.options.totalColumns > 1 &&\n        this.column === this.graphInstance.options.totalColumns - 1\n      ) {\n        this.deleteColBtn = new Button(this.controlLayer, {\n          icon: 'delete_col',\n          type: 'danger',\n          className: 'absolute right-6 bottom-6 p-0 sm w-28 btn-br',\n          tooltip: this.graphInstance.options.labels.deleteColumn,\n          onClick: () => {\n            if (typeof this.graphInstance.options.deleteColumn === 'function') {\n              // custom delete column method\n              this.graphInstance.options.deleteColumn();\n            } else {\n              // auto delete column\n              if (this.graphInstance.hasTableHeader) {\n                // if has options.columns data (table header will be rendered)\n                if (typeof this.graphInstance.options.onDeleteColumn === 'function') {\n                  const targetColumn =\n                    this.graphInstance.options.columns[this.graphInstance.options.totalColumns - 1];\n                  this.graphInstance.options.onDeleteColumn(targetColumn);\n                }\n                this.graphInstance.options.columns.pop();\n                this.graphInstance.refresh(Object.assign({}, this.graphInstance.options));\n              } else {\n                // if options.columns data is null or empty\n                this.graphInstance.refresh(\n                  Object.assign({}, this.graphInstance.options, {\n                    columns: null,\n                    totalColumns: this.graphInstance.options.totalColumns - 1,\n                  }),\n                );\n                if (typeof this.graphInstance.options.onDeleteColumn === 'function') {\n                  this.graphInstance.options.onDeleteColumn();\n                }\n              }\n            }\n          },\n        });\n      }\n    }\n    this.element.addEventListener('mouseenter', () => this.onMouseEnter());\n    this.element.addEventListener('mouseleave', () => this.onMouseLeave());\n  }\n\n  onMouseEnter() {\n    this.controlLayer.classList.remove('hidden');\n    if (this.deleteRowBtn) {\n      if (\n        this.graphInstance.tableController.canDeleteRow &&\n        this.graphInstance.lineController.canDeleteRow\n      ) {\n        this.deleteRowBtn.element.classList.remove('hidden');\n      } else {\n        this.deleteRowBtn.element.classList.add('hidden');\n      }\n    }\n    if (this.deleteColBtn) {\n      if (\n        this.graphInstance.tableController.canDeleteColumn &&\n        this.graphInstance.lineController.canDeleteColumn\n      ) {\n        this.deleteColBtn.element.classList.remove('hidden');\n      } else {\n        this.deleteColBtn.element.classList.add('hidden');\n      }\n    }\n  }\n\n  onMouseLeave() {\n    this.controlLayer.classList.add('hidden');\n  }\n\n  public setIsTarget(isTarget: boolean) {\n    if (isTarget && !this.isTarget) {\n      this.isTarget = true;\n      this.element.style.opacity = '0.4';\n    } else if (!isTarget && this.isTarget) {\n      this.isTarget = false;\n      this.element.style.opacity = '1';\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport { TFGraphColumn } from '../../types';\nimport Button from '../ui/button/Button';\nimport Popup from '../ui/popup/Popup';\n// import TableHeaderCellMenu from './TableHeaderCellMenu';\n\n/**\n * table-flow-graph tabel header cell\n */\nexport default class TableHeaderCell {\n  public graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public columnIndex: number;\n  public isLast: boolean;\n  public columnData: TFGraphColumn;\n  public canDelete: boolean;\n  public canAdd: boolean;\n  public popMenu: Popup | null;\n  // public menu: TableHeaderCellMenu | null;\n  public controlLayer: HTMLElement;\n\n  constructor(\n    parentElement: HTMLElement,\n    columnData: TFGraphColumn,\n    columnIndex: number,\n    graphInstance: TableFlowGraph,\n  ) {\n    this.graphInstance = graphInstance;\n    this.columnIndex = columnIndex;\n    this.columnData = columnData;\n    this.isLast = this.columnIndex === this.graphInstance.options.totalColumns - 1;\n    this.element = this.createElement(parentElement);\n  }\n\n  createElement(parentElement: HTMLElement): HTMLElement {\n    const el = createClassElement('th', 'tfgraph-th', parentElement);\n    if (this.columnData.title) {\n      el.innerHTML = this.columnData.title;\n    } else {\n      el.classList.add('empty');\n    }\n    if (this.columnData.width) {\n      // TODO load width value from options\n      let width = this.columnData.width;\n      switch (this.columnData.width) {\n        case 'large':\n          width = '200';\n          break;\n        case 'md':\n          width = '170';\n          break;\n        case 'sm':\n          width = '130';\n          break;\n        case 'xs':\n          width = '105';\n          break;\n        default:\n          width = this.columnData.width;\n          break;\n      }\n      el.setAttribute('width', width);\n    } else {\n      el.setAttribute('width', 'auto');\n    }\n    el.setAttribute('id', `${this.graphInstance.id}_col_${this.columnIndex}`);\n    return el;\n  }\n\n  // header cell controls for edit mode\n  public setEditControls() {\n    // this.menu = new TableHeaderCellMenu(this, {\n    //   showDelete: this.isLast && this.graphInstance.tableController.canDeleteColumn,\n    //   // showAdd: this.isLast,\n    // });\n    // this.popMenu = new Popup(this.element, { placement: 'top', contentElement: this.menu.element });\n    // this.element.addEventListener('mouseenter', () => {\n    //   if (this.popMenu) {\n    //     this.popMenu.mouseEnter();\n    //   }\n    // });\n    // this.element.addEventListener('mouseleave', () => {\n    //   if (this.popMenu) {\n    //     this.popMenu.mouseLeave();\n    //   }\n    // });\n    this.controlLayer = createClassElement(\n      'div',\n      'tfgraph-cell-control-layer hidden',\n      this.element,\n    );\n    new Button(this.controlLayer, {\n      icon: 'edit',\n      type: 'primary',\n      className: 'absolute left-6 top-6 p-0 sm w-28 btn-tl',\n      tooltip: this.graphInstance.options.labels.editColumn,\n      onClick: () => {\n        if (typeof this.graphInstance.options.onEditColumn === 'function') {\n          this.graphInstance.options.onEditColumn(this.columnData);\n        }\n      },\n    });\n    // if (this.isLast && this.graphInstance.tableController.canDeleteColumn) {\n    //   new Button(this.controlLayer, {\n    //     icon: 'x',\n    //     type: 'danger',\n    //     className: 'absolute right-6 top-6 p-0 sm w-28 btn-tr',\n    //     tooltip: this.graphInstance.options.labels.deleteColumn,\n    //     onClick: () => {\n    //       if (typeof this.graphInstance.options.onDeleteColumn === 'function') {\n    //         this.graphInstance.options.onDeleteColumn(this.columnData);\n    //       }\n    //     },\n    //   });\n    // }\n    this.element.addEventListener('mouseenter', () => this.onMouseEnter());\n    this.element.addEventListener('mouseleave', () => this.onMouseLeave());\n  }\n\n  onMouseEnter() {\n    this.controlLayer.classList.remove('hidden');\n  }\n\n  onMouseLeave() {\n    this.controlLayer.classList.add('hidden');\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement, setStyles } from '../../lib/dom';\nimport { PositionAndSize } from '../../types';\nimport TableCell from './TableCell';\n\n/**\n * table-flow-graph anchor controller\n */\nexport default class TableMaskBox {\n  graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public disabled: boolean;\n\n  constructor(parentEl: HTMLElement, targetCell: TableCell, graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.disabled = false;\n    this.element = createClassElement('div', 'tfgraph-table-mask-cell', parentEl);\n    const nodeEl = createClassElement('div', 'tfgraph-table-mask-node', this.element);\n    nodeEl.innerText = targetCell.nodeData.title;\n    // setStyles(this.element, {\n    //   top: top + 'px',\n    //   left: left + 'px',\n    //   width: width + 'px',\n    //   height: height + 'px',\n    // });\n    this.element.addEventListener('click', () => {\n      if (!this.disabled) this.graphInstance.tableController.submitCellChange();\n    });\n  }\n\n  setPositinAndSize(pos_size: PositionAndSize) {\n    setStyles(this.element, {\n      top: pos_size.top + 'px',\n      left: pos_size.left + 'px',\n      width: pos_size.width + 'px',\n      height: pos_size.height + 'px',\n    });\n  }\n\n  disable() {\n    // TODO\n    if (!this.disabled) {\n      this.disabled = true;\n      this.element.classList.add('disabled');\n    }\n  }\n\n  enable() {\n    // TODO\n    if (this.disabled) {\n      this.disabled = false;\n      this.element.classList.remove('disabled');\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement, removeElement } from '../../lib/dom';\nimport { CellPositionAndSize, TableGridRect } from '../../types';\nimport TableCell from './TableCell';\nimport TableMaskBox from './TableMaskBox';\nimport { isEqual, cloneDeep } from 'lodash-es';\n\n/**\n * table-flow-graph anchor controller\n */\nexport default class TableMask {\n  graphInstance: TableFlowGraph;\n  public maskBox: TableMaskBox;\n  public element: HTMLElement;\n  public tableGridRectList: TableGridRect[];\n  public mouseGridRect: TableGridRect;\n  public targetCell: TableCell;\n  public targetCellRect: TableGridRect;\n  public resultCellPositionAndSize: CellPositionAndSize;\n  public filteredOccupiedList: number[][]; // 1: occupied, 0: not occupied\n\n  constructor(tableGridRectList: TableGridRect[], graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement(\n      'div',\n      'tfgraph-cell-mask-layer hidden',\n      graphInstance.element,\n    );\n    this.tableGridRectList = tableGridRectList;\n  }\n\n  private showMask(targetTableCell: TableCell) {\n    this.targetCell = targetTableCell;\n    this.targetCell.setIsTarget(true);\n    this.setFilteredOccupiedList();\n    this.maskBox = new TableMaskBox(this.element, this.targetCell, this.graphInstance);\n    this.mouseGridRect = this.getMouseRect();\n    this.targetCellRect = this.getRectByRowAndColumn(this.targetCell.row, this.targetCell.column);\n    this.setMaskBoxStatus();\n  }\n\n  // occupied list without target tabel cell\n  private setFilteredOccupiedList() {\n    this.filteredOccupiedList = cloneDeep(this.graphInstance.tableController.occupiedList);\n    for (let i = this.targetCell.row; i < this.targetCell.row + this.targetCell.rowSpan; i++) {\n      for (\n        let j = this.targetCell.column;\n        j < this.targetCell.column + this.targetCell.colSpan;\n        j++\n      ) {\n        this.filteredOccupiedList[i][j] = 0;\n      }\n    }\n  }\n\n  // set maskbox position/size/disabled etc.\n  private setMaskBoxStatus() {\n    if (this.graphInstance.tableController.isMovingCell) {\n      this.resultCellPositionAndSize = {\n        row: this.mouseGridRect.rowIndex,\n        column: this.mouseGridRect.columnIndex,\n        rowSpan: this.targetCell.rowSpan,\n        colSpan: this.targetCell.colSpan,\n      };\n    } else {\n      this.resultCellPositionAndSize = {\n        row: Math.min(this.targetCellRect.rowIndex, this.mouseGridRect.rowIndex),\n        column: Math.min(this.targetCellRect.columnIndex, this.mouseGridRect.columnIndex),\n        rowSpan: Math.abs(this.targetCellRect.rowIndex - this.mouseGridRect.rowIndex) + 1,\n        colSpan: Math.abs(this.targetCellRect.columnIndex - this.mouseGridRect.columnIndex) + 1,\n      };\n    }\n    const topLeftRect = this.getRectByRowAndColumn(\n      this.resultCellPositionAndSize.row,\n      this.resultCellPositionAndSize.column,\n    );\n    const bottomRightRect = this.getRectByRowAndColumn(\n      this.resultCellPositionAndSize.row + this.resultCellPositionAndSize.rowSpan - 1,\n      this.resultCellPositionAndSize.column + this.resultCellPositionAndSize.colSpan - 1,\n    );\n    this.maskBox.setPositinAndSize({\n      left: topLeftRect.left,\n      top: topLeftRect.top,\n      width: bottomRightRect.left - topLeftRect.left + bottomRightRect.width + 1,\n      height: bottomRightRect.top - topLeftRect.top + bottomRightRect.height + 1,\n    });\n\n    // set maskbox disable/enable\n    let doable = true;\n    for (\n      let i = this.resultCellPositionAndSize.row;\n      i < this.resultCellPositionAndSize.row + this.resultCellPositionAndSize.rowSpan;\n      i++\n    ) {\n      for (\n        let j = this.resultCellPositionAndSize.column;\n        j < this.resultCellPositionAndSize.column + this.resultCellPositionAndSize.colSpan;\n        j++\n      ) {\n        if (this.filteredOccupiedList[i][j] > 0) {\n          doable = false;\n        }\n      }\n    }\n    if (doable) {\n      this.maskBox.enable();\n    } else {\n      this.maskBox.disable();\n    }\n  }\n\n  public startMask(targetTableCell: TableCell) {\n    this.element.classList.remove('hidden');\n    this.showMask(targetTableCell);\n  }\n\n  public stopMask() {\n    this.element.classList.add('hidden');\n    removeElement(this.maskBox.element);\n    this.targetCell.setIsTarget(false);\n    this.maskBox = null;\n  }\n\n  public submitChange() {\n    this.stopMask();\n    const targetCellPositionAndSize: CellPositionAndSize = {\n      row: this.targetCell.row,\n      column: this.targetCell.column,\n      rowSpan: this.targetCell.rowSpan,\n      colSpan: this.targetCell.colSpan,\n    };\n    if (!isEqual(this.resultCellPositionAndSize, targetCellPositionAndSize)) {\n      const oldNode = cloneDeep(this.targetCell.nodeData);\n      this.targetCell.nodeData.row = this.resultCellPositionAndSize.row;\n      this.targetCell.nodeData.column = this.resultCellPositionAndSize.column;\n      this.targetCell.nodeData.rowSpan = this.resultCellPositionAndSize.rowSpan;\n      this.targetCell.nodeData.colSpan = this.resultCellPositionAndSize.colSpan;\n      // 提交变更\n      if (typeof this.graphInstance.options.onChangeNode === 'function') {\n        this.graphInstance.options.onChangeNode(this.targetCell.nodeData, oldNode);\n      }\n      this.graphInstance.refresh();\n    }\n  }\n\n  // get tableGridRect of current mouse position at\n  private getMouseRect() {\n    const mouseX = this.graphInstance.mousePosition.x;\n    const mouseY = this.graphInstance.mousePosition.y;\n    let targetGridRect: TableGridRect;\n    this.tableGridRectList.forEach((gridRect) => {\n      if (\n        mouseY > gridRect.top &&\n        mouseY < gridRect.top + gridRect.height &&\n        mouseX > gridRect.left &&\n        mouseX < gridRect.left + gridRect.width\n      ) {\n        targetGridRect = gridRect;\n      }\n    });\n    return targetGridRect;\n  }\n\n  private getRectByRowAndColumn(row, column) {\n    // const targetCellRow = this.targetCell.row;\n    // const targetCellColumn = this.targetCell.column;\n    return this.tableGridRectList.find((gridRect) => {\n      return gridRect.rowIndex === row && gridRect.columnIndex === column;\n    });\n  }\n\n  public onMouseMove() {\n    const newRect = this.getMouseRect();\n    if (!isEqual(newRect, this.mouseGridRect)) {\n      if (newRect) {\n        this.mouseGridRect = newRect;\n        this.setMaskBoxStatus();\n      }\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement, removeElement } from '../../lib/dom';\nimport TableCell from './TableCell';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableMask from './TableMask';\nimport Button from '../ui/button/Button';\nimport { setColumnAndRowDeletable } from '../../lib/utils';\nimport { ColumnSpec, RowSpec, TableGridRect } from '../../types';\n\n/**\n * table-flow-graph tabel\n */\nexport default class Table {\n  graphInstance: TableFlowGraph;\n  public element: HTMLElement;\n  public bottomControlEL: HTMLElement | null;\n  public cells: TableCell[];\n  public headerCells: TableHeaderCell[];\n  public canDeleteColumn: boolean;\n  public canDeleteRow: boolean;\n  public occupiedList: number[][]; // 1: occupied, 0: not occupied\n  public tableMask: TableMask;\n  public isMovingCell: boolean;\n  public isResizingCell: boolean;\n\n  constructor(graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement('table', 'tfgraph-table', this.graphInstance.element);\n    this.initTableStatus();\n  }\n\n  private initTableStatus() {\n    this.headerCells = [];\n    this.cells = [];\n    this.canDeleteColumn = false;\n    this.canDeleteRow = false;\n    this.occupiedList = [];\n    this.isMovingCell = false;\n    this.isResizingCell = false;\n  }\n\n  // render table and set table controls\n  public renderTable() {\n    this.initTableStatus();\n    this.element.innerHTML = '';\n    this.createHeader();\n    this.createTds();\n    this.createCells();\n    this.setControls();\n  }\n\n  public setControls() {\n    const isEditMode = this.graphInstance.mode === 'edit';\n    if (isEditMode) {\n      const deleteableObj = setColumnAndRowDeletable(\n        this.occupiedList,\n        this.graphInstance.options.totalRows,\n        this.graphInstance.options.totalColumns,\n      );\n      this.canDeleteColumn = deleteableObj.canDeleteColumn;\n      this.canDeleteRow = deleteableObj.canDeleteRow;\n\n      const columnSpecs: ColumnSpec[] = []; // [{left, width, columnIndex}]\n      const rowSpecs: RowSpec[] = []; // [{ top, height, rowIndex}]\n\n      this.headerCells.forEach((headerCell) => {\n        // set headerCell controls\n        headerCell.setEditControls();\n        // get columns's width and position\n        columnSpecs.push({\n          width: headerCell.element.getBoundingClientRect().width + 1,\n          left: headerCell.element.offsetLeft - 1,\n          columnIndex: headerCell.columnIndex,\n        });\n      });\n\n      this.cells.forEach((cell) => {\n        // set tabel cell controls\n        cell.setEditControls();\n      });\n\n      // get rowSpects(row top position and height)\n      for (let i = 0; i < this.graphInstance.options.totalRows; i++) {\n        const targetCell = this.getMinRowSpanCell(i, 1);\n        const targetCellHeight = targetCell.element.getBoundingClientRect().height;\n        const targetCellRowHeight = targetCellHeight / targetCell.rowSpan;\n        rowSpecs.push({\n          top: targetCell.element.offsetTop - 1 + (i - targetCell.row) * targetCellRowHeight,\n          height: targetCellRowHeight + 1,\n          rowIndex: i,\n        });\n      }\n\n      // each table grid's left, top, width, height without rowspan and colspan\n      const tableGridRectList: TableGridRect[] = [];\n      rowSpecs.forEach((rowSpec) => {\n        columnSpecs.forEach((columnSpec) => {\n          tableGridRectList.push(Object.assign({}, rowSpec, columnSpec));\n        });\n      });\n\n      this.tableMask = new TableMask(tableGridRectList, this.graphInstance);\n    } else {\n      // TODO click node event\n    }\n    this.setBottomControl();\n\n    // TODO set table cell controls\n    // 1. remove last row ✓\n    // 2. empty cell: add node ✓\n    // 3. node cell: edit node content ✓\n    // 4. node cell: adjust node size\n    // 5. node cell: move node position\n  }\n\n  //  recursively find min rowspan cell for targetRow\n  getMinRowSpanCell(row: number, minRowSpan = 1) {\n    let targetRowCell: TableCell | null = null;\n    const rowCells = this.cells.filter((cell) => cell.row === row);\n    if (rowCells.length === 0) {\n      if (row > 0) {\n        targetRowCell = this.getMinRowSpanCell(row - 1, minRowSpan + 1);\n      }\n    } else {\n      let rowSpan = 20;\n      rowCells.forEach((cell) => {\n        if (cell.rowSpan < rowSpan && cell.rowSpan >= minRowSpan) {\n          rowSpan = cell.rowSpan;\n          targetRowCell = cell;\n        }\n      });\n    }\n    return targetRowCell;\n  }\n\n  public onMouseMove() {\n    if (this.isMovingCell || this.isResizingCell) {\n      this.tableMask.onMouseMove();\n    }\n  }\n\n  public startMoving(targetCell: TableCell) {\n    this.isMovingCell = true;\n    this.graphInstance.toolbar.disable();\n    this.tableMask.startMask(targetCell);\n  }\n\n  public stopMoving() {\n    this.isMovingCell = false;\n    this.graphInstance.toolbar.enable();\n    this.tableMask.stopMask();\n  }\n\n  public startResizing(targetCell: TableCell) {\n    this.isResizingCell = true;\n    this.graphInstance.toolbar.disable();\n    this.tableMask.startMask(targetCell);\n  }\n\n  public stopResizing() {\n    this.isResizingCell = false;\n    this.graphInstance.toolbar.enable();\n    this.tableMask.stopMask();\n  }\n\n  // sumit cell position / size change\n  public submitCellChange() {\n    this.isMovingCell = false;\n    this.isResizingCell = false;\n    this.graphInstance.toolbar.enable();\n    this.tableMask.submitChange();\n  }\n\n  public setBottomControl() {\n    if (\n      this.graphInstance.mode === 'edit' &&\n      !this.bottomControlEL &&\n      this.graphInstance.options.totalRows < this.graphInstance.options.maxRows\n    ) {\n      this.bottomControlEL = createClassElement(\n        'div',\n        'flex flex-row items-center justify-between mt-15',\n        this.graphInstance.element,\n      );\n      // add row btn\n      new Button(this.bottomControlEL, {\n        icon: 'plus',\n        label: this.graphInstance.options.labels.addRow,\n        className: 'flex-1',\n        onClick: () => {\n          if (typeof this.graphInstance.options.addRow === 'function') {\n            this.graphInstance.options.addRow();\n          } else {\n            this.graphInstance.refresh(\n              Object.assign({}, this.graphInstance.options, {\n                totalRows: this.graphInstance.options.totalRows + 1,\n              }),\n            );\n            if (typeof this.graphInstance.options.onAddRow === 'function') {\n              this.graphInstance.options.onAddRow();\n            }\n          }\n        },\n      });\n    } else {\n      if (this.bottomControlEL) {\n        removeElement(this.bottomControlEL);\n        this.bottomControlEL = null;\n      }\n    }\n  }\n\n  // render table header\n  createHeader() {\n    if (this.graphInstance.options.columns && this.graphInstance.options.columns.length > 0) {\n      const tr = createClassElement('tr', 'tfgraph-tr');\n      this.graphInstance.options.columns.forEach((column, index) => {\n        const headerCell = new TableHeaderCell(tr, column, index, this.graphInstance);\n        this.headerCells.push(headerCell);\n      });\n      this.element.appendChild(tr);\n    }\n  }\n\n  // render table rows and tds\n  createTds() {\n    for (let i = 0; i < this.graphInstance.options.totalRows; i++) {\n      const tr = createClassElement('tr', 'tfgraph-tr');\n      tr.setAttribute('id', `${this.graphInstance.id}_tr_${i}`);\n      const occupiedRow: number[] = [];\n      this.occupiedList.push(occupiedRow);\n      for (let j = 0; j < this.graphInstance.options.totalColumns; j++) {\n        const td = createClassElement('td', 'tfgraph-td', tr);\n        td.setAttribute('id', `${this.graphInstance.id}_td_${i}_${j}`);\n        occupiedRow.push(0);\n      }\n      this.element.appendChild(tr);\n    }\n  }\n\n  // render tabel cells\n  createCells() {\n    // spaned table cell id array\n    const spanedTdIds = [];\n    const nodes = this.graphInstance.options.nodes;\n    if (nodes && nodes.length > 0) {\n      nodes.forEach((node) => {\n        // set spanned tabel cell ids\n        if (node.colSpan > 1 || node.rowSpan > 1) {\n          for (let i = node.column; i < node.column + node.colSpan; i++) {\n            for (let j = node.row; j < node.row + node.rowSpan; j++) {\n              if (!(i === node.column && j === node.row)) {\n                spanedTdIds.push(`${this.graphInstance.id}_td_${j}_${i}`);\n                this.occupiedList[j][i] = 1;\n              }\n            }\n          }\n        }\n      });\n    }\n\n    // remove spaned tabell cell element\n    spanedTdIds.forEach((id) => removeElement(document.getElementById(id)));\n\n    // create table cells\n    for (let i = 0; i < this.graphInstance.options.totalRows; i++) {\n      for (let j = 0; j < this.graphInstance.options.totalColumns; j++) {\n        if (!spanedTdIds.includes(`${this.graphInstance.id}_td_${i}_${j}`)) {\n          const targetNode =\n            nodes && nodes.length > 0\n              ? nodes.find((node) => node.row === i && node.column === j)\n              : null;\n          const targetTd = document.getElementById(`${this.graphInstance.id}_td_${i}_${j}`);\n          if (targetNode) {\n            targetTd.setAttribute('colSpan', targetNode.colSpan.toString());\n            targetTd.setAttribute('rowSpan', targetNode.rowSpan.toString());\n            this.occupiedList[i][j] = 1;\n          }\n          this.cells.push(new TableCell(targetTd, targetNode, i, j, this.graphInstance));\n        }\n      }\n    }\n  }\n}\n","// import { TableFlowGraph } from '../index';\nimport { createClassElement, removeElement } from '../../lib/dom';\nimport { LineOptions, Position } from '../../types';\nimport LineGroup from './LineGroup';\n\n/**\n * table-flow-graph line\n */\nexport default class LineSegment {\n  public element: HTMLElement;\n  public thickness: number;\n  public startPointEl: HTMLElement;\n  public endArrowEl: HTMLElement;\n\n  constructor(parent: LineGroup, options: LineOptions) {\n    this.element = createClassElement('div', 'tfgraph-line', parent.element);\n    const { positionA, positionB, thickness = 2, isStart = true, isEnd = true } = options;\n    this.thickness = thickness;\n    if (isStart) this.toggleStartPoint();\n    if (isEnd) this.toggleEndArrow();\n    this.drawLine(positionA, positionB);\n    this.element.addEventListener('mouseenter', () => parent.setHovered(true));\n    this.element.addEventListener('mouseleave', () => parent.setHovered(false));\n    this.element.addEventListener('dblclick', () => parent.onDoubleClick());\n  }\n\n  public setHoverd(hovered = true) {\n    if (hovered) {\n      this.element.classList.add('hovered');\n    } else {\n      this.element.classList.remove('hovered');\n    }\n  }\n\n  public drawLine(positionA: Position, positionB: Position) {\n    // start point\n    const x1 = positionA.x;\n    const y1 = positionA.y;\n    // end point\n    const x2 = positionB.x;\n    const y2 = positionB.y;\n\n    // distance\n    const length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n\n    // center\n    const cx = (x1 + x2) / 2 - length / 2;\n    const cy = (y1 + y2) / 2 - this.thickness / 2;\n    // angle\n    const angle = Math.atan2(y2 - y1, x2 - x1) * (180 / Math.PI);\n\n    this.element.style.width = length + this.thickness + 'px';\n    this.element.style.height = this.thickness + 'px';\n    this.element.style.left = cx - 0.5 * this.thickness + 'px';\n    this.element.style.top = cy + 'px';\n    this.element.style.borderRadius = this.thickness + 'px';\n    this.element.style.transform = `rotate(${angle}deg)`;\n  }\n\n  public toggleStartPoint() {\n    if (this.startPointEl) {\n      removeElement(this.startPointEl);\n    } else {\n      this.startPointEl = createClassElement('div', 'start-point', this.element);\n    }\n  }\n\n  public toggleEndArrow() {\n    if (this.endArrowEl) {\n      removeElement(this.endArrowEl);\n    } else {\n      this.endArrowEl = createClassElement('div', 'arrow', this.element);\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement, removeElement } from '../../lib/dom';\nimport { LineGroupOptions, Position } from '../../types';\nimport Anchor from '../anchor/Anchor';\nimport LineSegment from './LineSegment';\n\n/**\n * table-flow-graph line group\n */\nexport default class LineGroup {\n  public element: HTMLElement;\n  public isDrawingActive: boolean;\n  public anchorIds: string[];\n  public anchors: Anchor[];\n  public cursorLine: LineSegment; // line currently drawing at end\n  public lines: LineSegment[];\n  public cursorLineStartPosition: Position;\n  public graphInstance: TableFlowGraph;\n  public hovered: boolean; // is mouse hover\n\n  constructor(\n    parentElement: HTMLElement,\n    options: LineGroupOptions,\n    graphInstance: TableFlowGraph,\n  ) {\n    this.element = createClassElement('div', 'tfgraph-line-group', parentElement);\n    this.isDrawingActive = options.isDrawingActive;\n    this.anchorIds = options.anchorIds;\n    this.graphInstance = graphInstance;\n    this.drawLines();\n  }\n\n  public addLineSegment(anchorId) {\n    if (!this.anchorIds.includes(anchorId)) {\n      this.anchorIds.push(anchorId);\n      this.drawLines();\n    }\n  }\n\n  public onDoubleClick() {\n    if (this.hovered) {\n      if (this.isDrawingActive) {\n        this.graphInstance.lineController.endDrawLine();\n      } else {\n        this.graphInstance.lineController.removeLineGroup(this);\n      }\n    }\n  }\n\n  public drawLines() {\n    this.anchors = [];\n    this.lines = [];\n    if (this.anchorIds.length === 0) return;\n    this.anchorIds.forEach((anchorId) => {\n      const targetAnchor = this.graphInstance.anchorController.anchors.find(\n        (anchor) => anchor.id === anchorId,\n      );\n      this.anchors.push(targetAnchor);\n    });\n    this.element.innerHTML = '';\n    const pointList: Position[] = this.anchors.map((anchor) => ({\n      x: anchor.posX,\n      y: anchor.posY,\n    }));\n    if (pointList.length > 1) {\n      for (let i = 0; i < pointList.length - 1; i++) {\n        const line = new LineSegment(this, {\n          positionA: pointList[i],\n          positionB: pointList[i + 1],\n          thickness: 2,\n          isStart: i === 0,\n          isEnd: i === pointList.length - 2 && !this.isDrawingActive,\n        });\n        this.lines.push(line);\n      }\n    }\n    // add line between last anchor position and mouse position when drawing\n    if (this.isDrawingActive) {\n      this.cursorLineStartPosition = pointList[pointList.length - 1];\n      // draw cursor line\n      this.cursorLine = new LineSegment(this, {\n        positionA: this.cursorLineStartPosition,\n        positionB: this.graphInstance.mousePosition,\n        thickness: 2,\n        isStart: pointList.length === 0,\n        isEnd: true,\n      });\n      this.lines.push(this.cursorLine);\n    }\n  }\n\n  public setHovered(hovered = true) {\n    if (this.graphInstance.mode === 'edit') {\n      this.hovered = hovered;\n      this.lines.forEach((line) => {\n        line.setHoverd(hovered);\n      });\n    }\n  }\n\n  public endDrawing() {\n    // removeElement(this.cursorLine.element);\n    this.isDrawingActive = false;\n    this.drawLines();\n  }\n\n  public escapeDrawing() {\n    if (this.cursorLine) {\n      if (this.anchorIds.length > 0) {\n        this.anchorIds.pop();\n        if (this.anchorIds.length === 0) {\n          removeElement(this.element);\n          // remove the last anchor id in this line group\n          this.graphInstance.lineController.lineAnchorIds =\n            this.graphInstance.lineController.lineAnchorIds.filter(\n              (lineArray) => lineArray.length > 1,\n            );\n          this.graphInstance.lineController.endDrawLine();\n        } else {\n          this.drawLines();\n        }\n      }\n    }\n  }\n\n  public onMouseMove(graphInstance: TableFlowGraph) {\n    if (this.cursorLine) {\n      let targetPosition = graphInstance.mousePosition;\n      // snap to hovered anchor\n      if (\n        graphInstance.anchorController.hoveredAnchor &&\n        !this.anchorIds.includes(graphInstance.anchorController.hoveredAnchor.id)\n      ) {\n        targetPosition = {\n          x: graphInstance.anchorController.hoveredAnchor.posX,\n          y: graphInstance.anchorController.hoveredAnchor.posY,\n        };\n      }\n      this.cursorLine.drawLine(this.cursorLineStartPosition, targetPosition);\n    }\n  }\n}\n","import { cloneDeep, isEqual } from 'lodash-es';\nimport { TableFlowGraph } from '../../index';\nimport { createClassElement, removeElement, setStyles } from '../../lib/dom';\nimport LineGroup from './LineGroup';\n\n/**\n * table-flow-graph lines controller\n */\nexport default class LineController {\n  public element: HTMLElement;\n  public lineAnchorIds: string[][]; // anchor ids to draw lines\n  public originLineAnchorIds: string[][]; // compare to lineAnchorIds to determine if lines are changed\n  public isDrawingLine: boolean;\n  public currentDrawingLine: LineGroup;\n  public graphInstance: TableFlowGraph;\n  public canDeleteColumn: boolean;\n  public canDeleteRow: boolean;\n\n  constructor(graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.element = createClassElement('div', 'tfgraph-line-layer', this.graphInstance.element);\n    const { options } = this.graphInstance;\n    // this.options.mode = options.mode ? options.mode : 'view';\n    if (options.lines && Array.isArray(options.lines)) {\n      this.lineAnchorIds = options.lines;\n    } else {\n      this.lineAnchorIds = [];\n    }\n    this.originLineAnchorIds = cloneDeep(this.lineAnchorIds);\n  }\n\n  public renderLines() {\n    this.element.innerHTML = '';\n    this.lineAnchorIds.forEach((lineGroup) => {\n      new LineGroup(\n        this.element,\n        { anchorIds: lineGroup, isDrawingActive: false },\n        this.graphInstance,\n      );\n    });\n    this.setColAndRowDeletable();\n  }\n\n  public startDrawLine() {\n    this.isDrawingLine = true;\n    this.graphInstance.toolbar.disable();\n    // set lines layer below anchors layer when draing line\n    setStyles(this.element, { zIndex: '1' });\n    setStyles(this.graphInstance.anchorController.element, { zIndex: '2' });\n\n    this.originLineAnchorIds = cloneDeep(this.lineAnchorIds);\n  }\n\n  public endDrawLine() {\n    this.isDrawingLine = false;\n    this.graphInstance.toolbar.enable();\n    // set lines layer above anchors layer when draing line\n    setStyles(this.element, { zIndex: '2' });\n    setStyles(this.graphInstance.anchorController.element, { zIndex: '1' });\n\n    if (this.currentDrawingLine) {\n      this.currentDrawingLine.endDrawing();\n      if (this.currentDrawingLine.anchorIds.length <= 1) {\n        this.removeLineGroup(this.currentDrawingLine);\n      }\n      this.currentDrawingLine = undefined;\n    }\n    if (!isEqual(this.originLineAnchorIds, this.lineAnchorIds)) {\n      // trigger event: linesChanged\n      this.onChangeLines();\n    }\n  }\n\n  setColAndRowDeletable() {\n    const totalRows = this.graphInstance.options.totalRows;\n    const totalColumns = this.graphInstance.options.totalColumns;\n    this.canDeleteColumn = true;\n    this.canDeleteRow = true;\n    this.lineAnchorIds.forEach((line) => {\n      line.forEach((id) => {\n        const idArray = id.split('_');\n        const row = idArray[1];\n        const col = idArray[2];\n        if (parseInt(col) === totalColumns - 1) {\n          this.canDeleteColumn = false;\n        }\n        if (parseInt(row) === totalRows - 1) {\n          this.canDeleteRow = false;\n        }\n      });\n    });\n  }\n\n  public onChangeLines() {\n    this.setColAndRowDeletable();\n    if (typeof this.graphInstance.options.onChangeLines === 'function') {\n      this.graphInstance.options.onChangeLines(this.lineAnchorIds);\n    }\n  }\n\n  public removeLineGroup(line: LineGroup) {\n    removeElement(line.element);\n    this.lineAnchorIds = this.lineAnchorIds.filter((lines) => !isEqual(lines, line.anchorIds));\n    if (!isEqual(this.lineAnchorIds, this.originLineAnchorIds)) {\n      this.originLineAnchorIds = cloneDeep(this.lineAnchorIds);\n      // trigger event: linesChanged\n      this.onChangeLines();\n    }\n  }\n\n  public createLineGroup(anchorId) {\n    this.startDrawLine();\n    this.lineAnchorIds.push([anchorId]);\n    this.currentDrawingLine = new LineGroup(\n      this.element,\n      { anchorIds: this.lineAnchorIds[this.lineAnchorIds.length - 1], isDrawingActive: true },\n      this.graphInstance,\n    );\n  }\n\n  public addLineSegment(anchorId) {\n    if (this.isDrawingLine && this.currentDrawingLine) {\n      this.currentDrawingLine.addLineSegment(anchorId);\n    }\n  }\n\n  public onMouseMove() {\n    if (this.isDrawingLine && this.currentDrawingLine) {\n      this.currentDrawingLine.onMouseMove(this.graphInstance);\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport { Bearing } from '../../types';\n\n/**\n * Anchor point for drawing lines\n */\nexport default class Anchor {\n  // element of this Anchor\n  public element: HTMLElement;\n  // the bearing relative to this anchor's parent table cell\n  public bearing: Bearing;\n  public elementTr: HTMLElement;\n  public elementCol: HTMLElement;\n  // is the anchor on table cell border or on inner block border(top / bottom)\n  public isOffsetX: boolean;\n  // is the anchor on table cell border or on inner block border(left / right)\n  public isOffsetY: boolean;\n  // id for this Anchor class\n  public id = '';\n  // x position relative to table area\n  public posX = 0;\n  // y position relative to table area\n  public posY = 0;\n  public row: number;\n  public column: number;\n  public hidden = false;\n\n  constructor(\n    bearing: Bearing,\n    row: number,\n    column: number,\n    graphInstance: TableFlowGraph,\n    isOffsetX = false,\n    isOffsetY = false,\n  ) {\n    this.bearing = bearing;\n    this.isOffsetX = isOffsetX;\n    this.isOffsetY = isOffsetY;\n    this.row = row;\n    this.column = column;\n    this.elementTr = document.getElementById(`${graphInstance.id}_tr_${row}`);\n    this.elementCol = document.getElementById(`${graphInstance.id}_col_${column}`);\n    if (this.elementTr && this.elementCol) {\n      // create dom elements\n      this.element = createClassElement(\n        'div',\n        'tfgraph-anchor',\n        graphInstance.anchorController.element,\n      );\n      createClassElement('div', 'tfgraph-anchor-point', this.element);\n      const area = createClassElement('div', 'tfgraph-anchor-area', this.element);\n      createClassElement('div', 'tfgraph-anchor-circle', area);\n\n      // set Anchor instance id\n      this.id = `anchor_${row}_${column}_${bearing}_${isOffsetX ? 'offsetx' : 'normalx'}_${\n        isOffsetY ? 'offsety' : 'normaly'\n      }`;\n      // set dom id\n      this.element.setAttribute('id', `${graphInstance.id}_${this.id}`);\n\n      graphInstance.anchorController.anchors.push(this);\n      this.setVisible(graphInstance.mode === 'edit');\n      // setTimeout(() => this.setPosition(), 1);\n      this.setPosition();\n      this.element.addEventListener('click', () => {\n        if (!graphInstance.lineController.isDrawingLine) {\n          graphInstance.lineController.createLineGroup(this.id);\n        } else {\n          graphInstance.lineController.addLineSegment(this.id);\n        }\n      });\n      this.element.addEventListener('mouseenter', () => {\n        graphInstance.anchorController.setHoveredAnchor(this);\n      });\n      this.element.addEventListener('mouseleave', () => {\n        if (graphInstance.anchorController.hoveredAnchor.id === this.id) {\n          graphInstance.anchorController.setHoveredAnchor(undefined);\n        }\n      });\n      // dblclick to finish drawing lines\n      this.element.addEventListener('dblclick', () => {\n        if (graphInstance.lineController.isDrawingLine) {\n          graphInstance.lineController.endDrawLine();\n        }\n      });\n    }\n  }\n\n  setOnePosition(x, y) {\n    this.posX = x;\n    this.posY = y;\n    this.element.style.left = x + 'px';\n    this.element.style.top = y + 'px';\n    this.element.setAttribute('title', `xpos & ypos=${x},${y}`);\n  }\n\n  public setVisible(visible: boolean) {\n    if (visible) {\n      this.element.classList.remove('hidden');\n    } else {\n      this.element.classList.add('hidden');\n    }\n  }\n\n  public setPosition() {\n    const x_left = this.elementCol.offsetLeft + (this.isOffsetX ? 15 : 0);\n    const x_center = this.elementCol.offsetLeft + 0.5 * this.elementCol.offsetWidth;\n    const x_right =\n      this.elementCol.offsetLeft + this.elementCol.offsetWidth - (this.isOffsetX ? 15 : 0);\n    const y_top = this.elementTr.offsetTop + (this.isOffsetY ? 15 : 0);\n    const y_center = this.elementTr.offsetTop + 0.5 * this.elementTr.offsetHeight;\n    const y_bottom =\n      this.elementTr.offsetTop + this.elementTr.offsetHeight - (this.isOffsetY ? 15 : 0);\n\n    switch (this.bearing) {\n      case 'topleft':\n        this.setOnePosition(x_left, y_top);\n        break;\n      case 'top':\n        this.setOnePosition(x_center, y_top);\n        break;\n      case 'topright':\n        this.setOnePosition(x_right, y_top);\n        break;\n      case 'right':\n        this.setOnePosition(x_right, y_center);\n        break;\n      case 'bottomright':\n        this.setOnePosition(x_right, y_bottom);\n        break;\n      case 'bottom':\n        this.setOnePosition(x_center, y_bottom);\n        break;\n      case 'bottomleft':\n        this.setOnePosition(x_left, y_bottom);\n        break;\n      case 'left':\n        this.setOnePosition(x_left, y_center);\n        break;\n      case 'center':\n        this.setOnePosition(x_center, y_center);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { TableFlowGraph } from '../../index';\nimport { createClassElement } from '../../lib/dom';\nimport TableCell from '../table/TableCell';\nimport Anchor from './Anchor';\n\n/**\n * table-flow-graph anchor controller\n */\nexport default class AnchorController {\n  public element: HTMLElement;\n  public anchors: Anchor[];\n  public hoveredAnchor: Anchor; // current Anchor that mouse hoverd\n  graphInstance: TableFlowGraph;\n\n  constructor(graphInstance: TableFlowGraph) {\n    this.graphInstance = graphInstance;\n    this.anchors = [];\n    this.element = createClassElement('div', 'tfgraph-anchor-layer', graphInstance.element);\n  }\n\n  public renderAnchors() {\n    this.element.innerHTML = '';\n    this.anchors = [];\n    this.graphInstance.tableController.cells.forEach((cell) => {\n      // console.log('cell:::::::::::', cell);\n      this.createAnchors(cell);\n    });\n  }\n\n  public setHoveredAnchor(anchor: Anchor | undefined) {\n    this.hoveredAnchor = anchor;\n  }\n\n  public resetPosition() {\n    if (this.anchors && this.anchors.length > 0) {\n      this.anchors.forEach((anchor) => {\n        anchor.setPosition();\n      });\n    }\n  }\n\n  public setAnchorsVisible(visible: boolean) {\n    if (this.anchors && this.anchors.length > 0) {\n      this.anchors.forEach((anchor: Anchor) => {\n        anchor.setVisible(visible);\n      });\n    }\n  }\n\n  // create anchors for one cell\n  createAnchors(cell: TableCell) {\n    for (let row = cell.row; row < cell.row + cell.rowSpan; row++) {\n      for (let col = cell.column; col < cell.column + cell.colSpan; col++) {\n        if (row === 0) {\n          new Anchor('top', row, col, this.graphInstance);\n          new Anchor('topright', row, col, this.graphInstance);\n          if (cell.column === 0) {\n            new Anchor('topleft', row, col, this.graphInstance);\n          }\n        }\n        if (col === 0) {\n          new Anchor('left', row, col, this.graphInstance);\n          new Anchor('bottomleft', row, col, this.graphInstance);\n        }\n        if (col === cell.column + cell.colSpan - 1) {\n          new Anchor('right', row, col, this.graphInstance);\n        }\n        if (row === cell.row + cell.rowSpan - 1) {\n          new Anchor('bottom', row, col, this.graphInstance);\n        }\n        if (col === cell.column + cell.colSpan - 1 || row === cell.row + cell.rowSpan - 1) {\n          new Anchor('bottomright', row, col, this.graphInstance);\n        }\n        if (cell.hasNode) {\n          if (col === cell.column) {\n            new Anchor('left', row, col, this.graphInstance, true, false);\n            if (row < cell.row + cell.rowSpan - 1) {\n              new Anchor('bottomleft', row, col, this.graphInstance, true, false);\n            }\n          }\n          if (col === cell.column + cell.colSpan - 1) {\n            new Anchor('right', row, col, this.graphInstance, true, false);\n            if (row < cell.row + cell.rowSpan - 1) {\n              new Anchor('bottomright', row, col, this.graphInstance, true, false);\n            }\n          }\n          if (row === cell.row) {\n            new Anchor('top', row, col, this.graphInstance, false, true);\n            if (col < cell.column + cell.colSpan - 1) {\n              new Anchor('topright', row, col, this.graphInstance, false, true);\n            }\n          }\n          if (row === cell.row + cell.rowSpan - 1) {\n            new Anchor('bottom', row, col, this.graphInstance, false, true);\n            if (col < cell.column + cell.colSpan - 1) {\n              new Anchor('bottomright', row, col, this.graphInstance, false, true);\n            }\n          }\n        }\n      }\n    }\n    if (!cell.hasNode) {\n      new Anchor('center', cell.row, cell.column, this.graphInstance);\n    }\n  }\n}\n","import './styles/index.scss';\nimport { createClassElement, setStyles } from './lib/dom';\nimport { debounce } from './lib/utils';\nimport { Mode, Position, TFGraphOptions } from './types';\nimport Toolbar from './components/toolbar/Toolbar';\nimport TableController from './components/table/TableController';\nimport LineController from './components/line/LineController';\nimport AnchorController from './components/anchor/AnchorController';\n\n// default options\nconst defaultOptions: TFGraphOptions = {\n  totalColumns: 8,\n  totalRows: 8,\n  maxColumns: 12,\n  maxRows: 30,\n  labels: {\n    editMode: 'Edit Mode',\n    previewMode: 'Preview Mode',\n    editColumn: 'Edit Column',\n    addColumn: 'Add Column',\n    deleteColumn: 'Delete Column',\n    addRow: 'Add Row',\n    deleteRow: 'Delete Row',\n    editNode: 'Edit Node',\n    addNode: 'Add Node',\n    deleteNode: 'Delete Node',\n    adjustNodeSize: 'Adjust Node Size',\n    moveNode: 'Move Node',\n  },\n};\n\nexport class TableFlowGraph {\n  public element: HTMLElement;\n  public baseElement: HTMLElement;\n  public options: TFGraphOptions;\n  public id: string;\n  public toolbar: Toolbar;\n  public isAlive: boolean;\n  public hasTableHeader: boolean;\n  public mode: Mode;\n  public mousePosition: Position;\n  public tableController: TableController;\n  public lineController: LineController;\n  public anchorController: AnchorController;\n\n  constructor(el: HTMLElement, options: TFGraphOptions) {\n    if (!el) {\n      throw new Error('no element is specified to initialize TableFlowGraph');\n    } else {\n      this.baseElement = el;\n    }\n\n    // use id as unique key, to support multiple table-flow-graph instances in one page.\n    if (this.baseElement.getAttribute('id')) {\n      this.id = this.baseElement.getAttribute('id');\n    } else {\n      this.id = 'id' + (Math.random() * 100000).toFixed(0);\n    }\n\n    this.init(options);\n\n    window.addEventListener('resize', this, false);\n    window.addEventListener('keydown', this, false);\n    window.addEventListener('mousemove', this, false);\n\n    this.isAlive = true;\n  }\n\n  public init(options: TFGraphOptions) {\n    this.baseElement.innerHTML = '';\n\n    this.options = Object.assign({}, defaultOptions, options);\n    if (options.labels) {\n      this.options.labels = Object.assign({}, defaultOptions.labels, options.labels);\n    }\n    if (typeof this.options.rows !== 'undefined') {\n      this.options.totalRows = this.options.rows.length;\n    }\n    if (this.options.columns && this.options.columns.length > 0) {\n      this.options.totalColumns = this.options.columns.length;\n    }\n    if (!this.options.columns || this.options.columns.length === 0) {\n      this.options.columns = [];\n      this.hasTableHeader = false;\n      for (let i = 0; i < this.options.totalColumns; i++) {\n        this.options.columns.push({\n          width: 'auto',\n        });\n      }\n    } else {\n      this.hasTableHeader = true;\n    }\n    if (this.options.totalRows > this.options.maxRows) {\n      this.options.totalRows = this.options.maxRows;\n    }\n    if (this.options.totalColumns > this.options.maxColumns) {\n      this.options.totalColumns = this.options.maxColumns;\n    }\n\n    // create toolbar and edit state\n    if (this.options.isEditor) {\n      this.mode = 'edit';\n      this.toolbar = new Toolbar(this.baseElement, this);\n    } else {\n      this.mode = 'preview';\n    }\n\n    // create root dom elements and controllers\n    this.element = createClassElement('div', 'tfgraph', this.baseElement);\n    if (this.mode === 'edit') this.element.classList.add('edit');\n    this.lineController = new LineController(this);\n    this.anchorController = new AnchorController(this);\n    this.tableController = new TableController(this);\n\n    this.render();\n  }\n\n  public render() {\n    // render table\n    this.tableController.renderTable();\n    // render anchors\n    this.anchorController.renderAnchors();\n    // render lines\n    this.lineController.renderLines();\n  }\n\n  handleResize = () => {\n    // TODO detailed resize management\n    // this.anchorController.resetPosition();\n    this.refresh();\n  };\n  debouncedHandleResize = debounce(this.handleResize, 500);\n\n  // handle addEventListener events\n  handleEvent(event) {\n    switch (event.type) {\n      case 'resize':\n        this.debouncedHandleResize();\n        break;\n      case 'mousemove':\n        this.onMourseMove(event);\n        break;\n      case 'keydown':\n        this.onKeydown(event);\n        break;\n      default:\n        break;\n    }\n  }\n\n  onMourseMove(event) {\n    const rect = this.element.getBoundingClientRect();\n    const offsetX = event.clientX - rect.left;\n    const offsetY = event.clientY - rect.top;\n    this.mousePosition = { x: offsetX, y: offsetY };\n    this.lineController.onMouseMove();\n    this.tableController.onMouseMove();\n  }\n\n  onKeydown = (e) => {\n    if (e.code === 'Enter') {\n      // press enter to finish drawing line\n      if (this.lineController.isDrawingLine) {\n        this.lineController.endDrawLine();\n      }\n    } else if (e.code === 'Escape') {\n      // press esc to cancel last anchor point when drawing line\n      if (this.lineController.isDrawingLine) {\n        this.lineController.currentDrawingLine.escapeDrawing();\n      }\n      if (this.tableController.isMovingCell) {\n        this.tableController.stopMoving();\n      }\n      if (this.tableController.isResizingCell) {\n        this.tableController.stopResizing();\n      }\n    }\n  };\n\n  public refresh(options?: TFGraphOptions) {\n    if (!this.isAlive) {\n      return;\n    } else {\n      setTimeout(() => {\n        const height = this.baseElement.getBoundingClientRect().height;\n        // maintain consistent height when rerendering dom elements\n        setStyles(this.baseElement, { height: height + 'px' });\n        this.init(options ? options : this.options);\n        setStyles(this.baseElement, { height: 'auto' });\n      });\n    }\n  }\n\n  public destroy() {\n    if (!this.isAlive) {\n      return;\n    }\n\n    window.removeEventListener('resize', this, false);\n    window.removeEventListener('keydown', this, false);\n    window.removeEventListener('mousemove', this, false);\n\n    this.isAlive = false;\n  }\n\n  public changeMode(mode: Mode) {\n    if (this.mode !== mode) {\n      this.mode = mode;\n      if (mode === 'edit') {\n        this.element.classList.add('edit');\n      } else {\n        this.element.classList.remove('edit');\n      }\n      this.anchorController.setAnchorsVisible(mode === 'edit');\n      this.tableController.renderTable();\n    }\n  }\n}\n"],"names":["createClassElement","tagName","className","parentNode","el","document","createElement","appendChild","removeElement","element","remove","removeChild","setStyles","obj","key","val","concat","style","svgIconList","edit","plus","x","expand","move","delete_row","delete_col","Icon","parentElement","options","htmlString","div","name","this","innerHTML","trim","firstChild","size","color","styleObj","width","height","fill","setAttribute","classList","add","Tooltip","targetElement","_this","rendered","addEventListener","mouseEnter","mouseLeave","prototype","render","_a","_b","placement","label","targetRect","getBoundingClientRect","body","left","top","areaElement","boxElement","arrowElement","areaRect","arrowRect","areaStyleObj","arrowStyleObj","bottom","right","showTimeoutId","window","clearTimeout","dismiss","removeEventListener","setTimeout","dismissTimeoutId","Button","type","onClick","icon","tooltip","btnToolTip","e","disabled","setDisabled","setEnabled","Toggler","btnList","items","initialActiveIndex","onChange","indicatorEl","btnContainerEl","forEach","item","index","push","itemData","setActive","activeIndex","setActiveIndicator","containerRect","rect","Toolbar","graphInstance","modeToggler","labels","editMode","id","previewMode","changeMode","rightBtns","newColumnBtn","addColumn","disabledMask","setToolbarState","hasTableHeader","console","log","refresh","Object","assign","columns","totalColumns","onAddColumn","disable","enable","maxColumns","TableCell","data","row","column","createTabelCell","node","isBtn","mode","renderNode","innerText","title","hasNode","nodeEl","nodeData","rowSpan","colSpan","minHeight","setEditControls","controlLayer","moveNode","tableController","startMoving","editNode","onEditNode","deleteNode","onDeleteNode","adjustNodeSize","startResizing","addNode","onAddNode","totalRows","deleteRowBtn","deleteRow","onDeleteRow","deleteColBtn","deleteColumn","onDeleteColumn","targetColumn","pop","onMouseEnter","onMouseLeave","canDeleteRow","lineController","canDeleteColumn","setIsTarget","isTarget","opacity","TableHeaderCell","columnData","columnIndex","isLast","editColumn","onEditColumn","TableMaskBox","parentEl","targetCell","submitCellChange","setPositinAndSize","pos_size","TableMask","tableGridRectList","showMask","targetTableCell","setFilteredOccupiedList","maskBox","mouseGridRect","getMouseRect","targetCellRect","getRectByRowAndColumn","setMaskBoxStatus","filteredOccupiedList","cloneDeep","occupiedList","i","j","isMovingCell","resultCellPositionAndSize","rowIndex","Math","min","abs","topLeftRect","bottomRightRect","doable","startMask","stopMask","submitChange","targetCellPositionAndSize","isEqual","oldNode","onChangeNode","targetGridRect","mouseX","mousePosition","mouseY","y","gridRect","find","onMouseMove","newRect","Table","initTableStatus","headerCells","cells","isResizingCell","renderTable","createHeader","createTds","createCells","setControls","deleteableObj","setColumnAndRowDeletable","columnSpecs_1","rowSpecs","headerCell","offsetLeft","cell","getMinRowSpanCell","targetCellRowHeight","offsetTop","tableGridRectList_1","rowSpec","columnSpec","tableMask","setBottomControl","minRowSpan","targetRowCell","rowCells","filter","length","rowSpan_1","toolbar","stopMoving","stopResizing","bottomControlEL","maxRows","addRow","onAddRow","tr_1","tr","occupiedRow","spanedTdIds","nodes","getElementById","includes","this_1","targetNode","targetTd","toString","LineSegment","parent","positionA","positionB","thickness","isStart","_c","isEnd","toggleStartPoint","toggleEndArrow","drawLine","setHovered","onDoubleClick","setHoverd","hovered","x1","y1","x2","y2","sqrt","cx","cy","angle","atan2","PI","borderRadius","transform","startPointEl","endArrowEl","LineGroup","isDrawingActive","anchorIds","drawLines","addLineSegment","anchorId","endDrawLine","removeLineGroup","anchors","lines","targetAnchor","anchorController","anchor","pointList","map","posX","posY","line","cursorLineStartPosition","cursorLine","endDrawing","escapeDrawing","lineAnchorIds","lineArray","targetPosition","hoveredAnchor","LineController","Array","isArray","originLineAnchorIds","renderLines","lineGroup","setColAndRowDeletable","startDrawLine","isDrawingLine","zIndex","currentDrawingLine","undefined","onChangeLines","idArray","split","col","parseInt","createLineGroup","Anchor","bearing","isOffsetX","isOffsetY","hidden","elementTr","elementCol","area","setVisible","setPosition","setHoveredAnchor","setOnePosition","visible","x_left","x_center","offsetWidth","x_right","y_top","y_center","offsetHeight","y_bottom","AnchorController","renderAnchors","createAnchors","resetPosition","setAnchorsVisible","defaultOptions","TableFlowGraph","func","wait","timeoutID","handleResize","debouncedHandleResize","Number","isInteger","warn","args","_i","arguments","context","apply","onKeydown","code","Error","baseElement","getAttribute","random","toFixed","init","isAlive","rows","isEditor","TableController","handleEvent","event","onMourseMove","offsetX","clientX","offsetY","clientY","destroy"],"mappings":"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"}